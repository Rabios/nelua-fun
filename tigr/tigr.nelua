## cfile "tigr.c"
## cinclude "tigr.h"

## if ccinfo.is_windows then
  ##[[
    linklib "opengl32"
    linklib "gdi32"
  ]]
## else
  ##[[
    linklib "GL"
    linklib "GLU"
    linklib "X11"
  ]]
## end

-- This struct contains one pixel.
global TPixel: type <cimport, nodecl> = @record {
  r: cuchar,
  g: cuchar,
  b: cuchar,
  a: cuchar
}

-- window's bitmap is a fixed size (default)
global TIGR_FIXED: cint <cimport, nodecl, const>

-- window's bitmap will automatically resize after each tigrUpdat
global TIGR_AUTO: cint <cimport, nodecl, const>

-- always enforce (at least) 2X pixel scale
global TIGR_2X: cint <cimport, nodecl, const>

-- always enforce (at least) 3X pixel scale
global TIGR_3X: cint <cimport, nodecl, const>

-- always enforce (at least) 4X pixel scale
global TIGR_4X: cint <cimport, nodecl, const>

-- enable retina support on OS X
global TIGR_RETINA: cint <cimport, nodecl, const>

-- hide cursor
global TIGR_NOCURSOR: cint <cimport, nodecl, const>

-- start in full-screen mode
global TIGR_FULLSCREEN: cint <cimport, nodecl, const>

-- A Tigr bitmap.
global Tigr: type <cimport, nodecl> = @record {
  w: cint, h: cint, -- width/height (unscaled)
  pix: *[0]TPixel,  -- pixel data
  handle: pointer   -- OS window handle, NULL for off-screen bitmaps.
}

-- Creates a new empty window. (title is UTF-8)
global function tigrWindow(w: cint, h: cint, title: cstring <const>, flags: cint): *Tigr <cimport, nodecl> end

-- Creates an empty off-screen bitmap.
global function tigrBitmap(w: cint, h: cint): *Tigr <cimport, nodecl> end

-- Deletes a window/bitmap.
global function tigrFree(bmp: *Tigr): void <cimport, nodecl> end

-- Returns non-zero if the user requested to close a window.
global function tigrClosed(bmp: *Tigr): cint <cimport, nodecl> end

-- Displays a window's contents on-screen.
global function tigrUpdate(bmp: *Tigr): void <cimport, nodecl> end

--[[
  Called before doing direct OpenGL calls and before tigrUpdate.
  Returns non-zero if OpenGL is available.
]]
global function tigrBeginOpenGL(bmp: *Tigr): cint <cimport, nodecl> end

--[[
  Sets post shader for a window.
  This replaces the built-in post-FX shader.
]]
global function tigrSetPostShader(bmp: *Tigr, code: cstring <const>, size: cint): void <cimport, nodecl> end

--[[
  Sets post-FX properties for a window.
  
  The built-in post-FX shader uses the following parameters:
    - p1: hblur - use bilinear filtering along the x-axis
    - p2: vblur - use bilinear filtering along the y-axis
    - p3: scanlines - CRT scanlines effect (0-1)
    - p4: contrast - contrast boost (1 = no change, 2 = 2X contrast, etc)
]]
global function tigrSetPostFX(bmp: *Tigr, p1: float32, p2: float32, p3: float32, p4: float32): void <cimport, nodecl> end


--[[
  Helper for reading/writing pixels.
  For high performance, just write to `bmp->pix` yourself.
]]
global function tigrGet(bmp: *Tigr, x: cint, y: cint): TPixel <cimport, nodecl> end
global function tigrPlot(bmp: *Tigr, x: cint, y: cint, pix: TPixel): void <cimport, nodecl> end

-- Clears a bitmap to a color.
global function tigrClear(bmp: *Tigr, color: TPixel): void <cimport, nodecl> end

-- Fills in a solid rectangle.
global function tigrFill(bmp: *Tigr, x: cint, y: cint, w: cint, h: cint, color: TPixel): void <cimport, nodecl> end

-- Draws an empty rectangle. (exclusive co-ords)
global function tigrRect(bmp: *Tigr, x: cint, y: cint, w: cint, h: cint, color: TPixel): void <cimport, nodecl> end

-- Draws a line.
global function tigrLine(bmp: *Tigr, x0: cint, y0: cint, x1: cint, y1: cint, color: TPixel): void <cimport, nodecl> end

--[[
  Copies bitmap data.
    - `dx`/`dy` = dest co-ordinates
    - `sx`/`sy` = source co-ordinates
    - `w`/`h`   = width/height
]]
global function tigrBlit(dest: *Tigr, src: *Tigr, dx: cint, dy: cint, sx: cint, sy: cint, w: cint, h: cint, alpha: float32): void <cimport, nodecl> end

--[[
  Same as `tigrBlit`, but blends with the bitmap alpha channel,
  and uses the `alpha` variable to fade out.
]]
global function tigrBlitAlpha(dest: *Tigr, src: *Tigr, dx: cint, dy: cint, sx: cint, sy: cint, w: cint, h: cint, alpha: float32): void <cimport, nodecl> end

-- Same as tigrBlit, but tints the source bitmap with a color.
global function tigrBlitTint(dest: *Tigr, src: *Tigr, dx: cint, dy: cint, sx: cint, sy: cint, w: cint, h: cint, tint: TPixel): void <cimport, nodecl> end

-- Helper for making colors.
global function tigrRGB(r: cuchar, g: cuchar, b: cuchar): TPixel <cimport, nodecl> end

-- Helper for making colors.
global function tigrRGBA(r: cuchar, g: cuchar, b: cuchar, a: cuchar): TPixel <cimport, nodecl> end

global TigrGlyph: type <cimport, nodecl> = @record {
  code: cint,
  x: cint,
  y: cint,
  w: cint,
  h: cint
}

global TigrFont: type <cimport, nodecl> = @record {
  bitmap: *Tigr,
  numGlyphs: cint,
  glyphs: *[0]TigrGlyph
}

--[[
  Loads a font. The font bitmap should contain all characters for the given `codepage`, excluding the first 32 control codes.
  Supported codepages: 0 - Regular 7-bit ASCII, 1252 - Windows 1252
]]
global function tigrLoadFont(bitmap: *Tigr, codepage: cint): *TigrFont <cimport, nodecl> end

-- Frees a font.
global function tigrFreeFont(font: *TigrFont): void <cimport, nodecl> end

-- Prints UTF-8 text onto a bitmap.
global function tigrPrint(dest: *Tigr, font: *TigrFont, x: cint, y: cint, color: TPixel, text: cstring <const>, ...: cvarargs): void <cimport, nodecl> end

-- Returns the width of a string.
global function tigrTextWidth(font: *TigrFont, text: cstring <const>): cint <cimport, nodecl> end

-- Returns the height of a string.
global function tigrTextHeight(font: *TigrFont, text: cstring <const>): cint <cimport, nodecl> end

-- The built-in font.
global tfont: *TigrFont <cimport, nodecl, const>

-- Key scancodes. For letters/numbers, use ASCII ('A'-'Z' and '0'-'9').
global TKey: type <cimport, nodecl, using> = @enum(cint) {
  TK_PAD0=128,TK_PAD1,TK_PAD2,TK_PAD3,TK_PAD4,TK_PAD5,TK_PAD6,TK_PAD7,TK_PAD8,TK_PAD9,
  TK_PADMUL,TK_PADADD,TK_PADENTER,TK_PADSUB,TK_PADDOT,TK_PADDIV,
  TK_F1,TK_F2,TK_F3,TK_F4,TK_F5,TK_F6,TK_F7,TK_F8,TK_F9,TK_F10,TK_F11,TK_F12,
  TK_BACKSPACE,TK_TAB,TK_RETURN,TK_SHIFT,TK_CONTROL,TK_ALT,TK_PAUSE,TK_CAPSLOCK,
  TK_ESCAPE,TK_SPACE,TK_PAGEUP,TK_PAGEDN,TK_END,TK_HOME,TK_LEFT,TK_UP,TK_RIGHT,TK_DOWN,
  TK_INSERT,TK_DELETE,TK_LWIN,TK_RWIN,TK_NUMLOCK,TK_SCROLL,TK_LSHIFT,TK_RSHIFT,
  TK_LCONTROL,TK_RCONTROL,TK_LALT,TK_RALT,TK_SEMICOLON,TK_EQUALS,TK_COMMA,TK_MINUS,
  TK_DOT,TK_SLASH,TK_BACKTICK,TK_LSQUARE,TK_BACKSLASH,TK_RSQUARE,TK_TICK
}

-- Returns mouse input for a window.
global function tigrMouse(bmp: *Tigr, x: *cint, y: *cint, buttons: *[0]cint): void <cimport, nodecl> end

global TigrTouchPoint: type <cimport, nodecl> = @record {
  x: cint,
  y: cint
}

--[[
   Reads touch input for a window.
   Returns number of touch points read.
]]
global function tigrTouch(bmp: *Tigr, points: *[0]TigrTouchPoint, maxPoints: cint): cint <cimport, nodecl> end

--[[
  Returns non-zero if a key held.
  tigrKeyHeld repeats each frame.
]]
global function tigrKeyDown(bmp: *Tigr, key: cint): cint <cimport, nodecl> end

--[[
  Returns non-zero if a key is pressed.
  tigrKeyDown tests for the initial press.
]]
global function tigrKeyHeld(bmp: *Tigr, key: cint): cint <cimport, nodecl> end

--[[
  Reads character input for a window.
  Returns the Unicode value of the last key pressed, or 0 if none.
]]
global function tigrReadChar(bmp: *Tigr): cint <cimport, nodecl> end

--[[
  Loads a PNG from a file. (`fileName` is UTF-8)
  On error, returns `nilptr` and sets `errno`.
]]
global function tigrLoadImage(fileName: cstring <const>): *Tigr <cimport, nodecl> end

--[[
  Loads a PNG, from memory.
  On error, returns `nilptr` and sets `errno`.
]]
global function tigrLoadImageMem(data: pointer <const>, length: cint): *Tigr <cimport, nodecl> end

--[[
   Saves a PNG to a file. (`fileName` is UTF-8)
   On error, returns `0` and sets `errno`.
]]
global function tigrSaveImage(fileName: cstring <const>, bmp: *Tigr): cint <cimport, nodecl> end

-- Returns the amount of time elapsed since tigrTime was last called, or zero on the first call.
global function tigrTime(): float32 <cimport, nodecl> end

--[[
  Displays an error message and quits. (UTF-8)
  `bmp` can be `nilptr`.
]]
global function tigrError(bmp: *Tigr, message: cstring <const>, ...: cvarargs): void <cimport, nodecl> end

--[[
 Reads an entire file into memory. (`fileName` is UTF-8)
 Free it yourself after with `free`.
 On error, returns `nilptr` and sets `errno`.
 TIGR will automatically append `\0` to the end (not included in the length)
]]
global function tigrReadFile(fileName: cstring <const>, length: *cint): void <cimport, nodecl> end

--[[
  Decompresses DEFLATEd zip/zlib data into a buffer.
  Returns non-zero on success.
]]
global function tigrInflate(out: pointer, outlen: cuint, input: *pointer <const>, inlen: cuint): cint <cimport, nodecl> end

-- Encodes a single UTF8 codepoint and returns the next pointer.
global function tigrDecodeUTF8(text: cstring <const>, cp: *cint): cstring <cimport, nodecl> end

-- Encodes a single UTF8 codepoint and returns the next pointer.
global function tigrEncodeUTF8(text: cstring, cp: cint): cstring <cimport, nodecl> end
