##[[
  cinclude "SFML/Config.h"
  cinclude "SFML/GPUPreference.h"
  cinclude "SFML/System.h"
  cinclude "SFML/Audio.h"
  cinclude "SFML/Network.h"
  cinclude "SFML/Window.h"
  cinclude "SFML/Graphics.h"
  
  linklib "csfml-audio"
  linklib "csfml-graphics"
  linklib "csfml-network"
  linklib "csfml-system"
  linklib "csfml-window"
]]
global CSFML_VERSION_MAJOR: cint <cimport, nodecl, const>
global CSFML_VERSION_MINOR: cint <cimport, nodecl, const>
global CSFML_VERSION_PATCH: cint <cimport, nodecl, const>
global CSFML_SYSTEM_WINDOWS: cint <cimport, nodecl, const>
global CSFML_SYSTEM_LINUX: cint <cimport, nodecl, const>
global CSFML_SYSTEM_MACOS: cint <cimport, nodecl, const>
global CSFML_SYSTEM_FREEBSD: cint <cimport, nodecl, const>

global sfBool: type <cimport, nodecl> = @cint
global sfFalse: cint <cimport, nodecl, const>
global sfTrue: cint <cimport, nodecl, const>

global sfInt8: type <cimport, nodecl> = @cchar
global sfUint8: type <cimport, nodecl> = @cuchar
global sfInt16: type <cimport, nodecl> = @cshort
global sfUint16: type <cimport, nodecl> = @cushort
global sfInt32: type <cimport, nodecl> = @cint
global sfUint32: type <cimport, nodecl> = @cuint
global sfInt64: type <cimport, nodecl> = @clonglong
global sfUint64: type <cimport, nodecl> = @culonglong

global sfTime: type <cimport, nodecl> = @record {
  microseconds: sfInt64
}

global sfTime_Zero: sfTime <cimport, nodecl, const>
global function sfTime_asSeconds(time: sfTime): float32 <cimport, nodecl> end
global function sfTime_asMilliseconds(time: sfTime): sfInt32 <cimport, nodecl> end
global function sfTime_asMicroseconds(time: sfTime): sfInt64 <cimport, nodecl> end
global function sfSeconds(amount: float32): sfTime <cimport, nodecl> end
global function sfMilliseconds(amount: sfInt32): sfTime <cimport, nodecl> end
global function sfMicroseconds(amount: sfInt64): sfTime <cimport, nodecl> end

global sfClock: type <cimport, nodecl, forwarddecl> = @record {}
global sfMutex: type <cimport, nodecl, forwarddecl> = @record {}
global sfThread: type <cimport, nodecl, forwarddecl> = @record {}

global function sfClock_create(): *sfClock <cimport, nodecl> end
global function sfClock_copy(clock: *sfClock <const>): *sfClock <cimport, nodecl> end
global function sfClock_destroy(clock: *sfClock): void <cimport, nodecl> end
global function sfClock_getElapsedTime(clock: *sfClock <const>): sfTime <cimport, nodecl> end
global function sfClock_restart(clock: *sfClock): sfTime <cimport, nodecl> end

global sfInputStreamReadFunc: type <cimport, nodecl> = @function(pointer, sfInt64, pointer): sfInt64
global sfInputStreamSeekFunc: type <cimport, nodecl> = @function(sfInt64, pointer): sfInt64
global sfInputStreamTellFunc: type <cimport, nodecl> = @function(pointer): sfInt64
global sfInputStreamGetSizeFunc: type <cimport, nodecl> = @function(pointer): sfInt64

global sfInputStream: type <cimport, nodecl> = @record {
  read: sfInputStreamReadFunc,
  seek: sfInputStreamSeekFunc,
  tell: sfInputStreamTellFunc,
  getSize: sfInputStreamGetSizeFunc,
  userData: pointer
}

global function sfMutex_create(): *sfMutex <cimport, nodecl> end
global function sfMutex_destroy(mutex: *sfMutex): void <cimport, nodecl> end
global function sfMutex_lock(mutex: *sfMutex): void <cimport, nodecl> end
global function sfMutex_unlock(mutex: *sfMutex): void <cimport, nodecl> end

global function sfSleep(duration: sfTime): void <cimport, nodecl> end

global function sfThread_create(f: function(pointer): void, userdata: pointer): *sfThread <cimport, nodecl> end
global function sfThread_destroy(thread: *sfThread): void <cimport, nodecl> end
global function sfThread_launch(thread: *sfThread): void <cimport, nodecl> end
global function sfThread_wait(thread: *sfThread): void <cimport, nodecl> end
global function sfThread_terminate(thread: *sfThread): void <cimport, nodecl> end

global sfVector2i: type <cimport, nodecl> = @record {
  x: cint,
  y: cint
}

global sfVector2u: type <cimport, nodecl> = @record {
  x: cuint,
  y: cuint
}

global sfVector2f: type <cimport, nodecl> = @record {
  x: float32,
  y: float32
}

global sfVector3f: type <cimport, nodecl> = @record {
  x: float32,
  y: float32,
  z: float32
}

global sfFtpDirectoryResponse: type <cimport, nodecl, forwarddecl> = @record {}
global sfFtpListingResponse: type <cimport, nodecl, forwarddecl> = @record {}
global sfFtpResponse: type <cimport, nodecl, forwarddecl> = @record {}
global sfFtp: type <cimport, nodecl, forwarddecl> = @record {}
global sfHttpRequest: type <cimport, nodecl, forwarddecl> = @record {}
global sfHttpResponse: type <cimport, nodecl, forwarddecl> = @record {}
global sfHttp: type <cimport, nodecl, forwarddecl> = @record {}
global sfPacket: type <cimport, nodecl, forwarddecl> = @record {}
global sfSocketSelector: type <cimport, nodecl, forwarddecl> = @record {}
global sfTcpListener: type <cimport, nodecl, forwarddecl> = @record {}
global sfTcpSocket: type <cimport, nodecl, forwarddecl> = @record {}
global sfUdpSocket: type <cimport, nodecl, forwarddecl> = @record {}

global sfIpAddress: type <cimport, nodecl> = @record {
  address: [16]cchar
}

global sfIpAddress_None: sfIpAddress <cimport, nodecl, const>
global sfIpAddress_Any: sfIpAddress <cimport, nodecl, const>
global sfIpAddress_LocalHost: sfIpAddress <cimport, nodecl, const>
global sfIpAddress_Broadcast: sfIpAddress <cimport, nodecl, const>

global function sfIpAddress_fromString(address: cstring <const>): sfIpAddress <cimport, nodecl> end
global function sfIpAddress_fromBytes(byte0: sfUint8, byte1: sfUint8, byte2: sfUint8, byte3: sfUint8): sfIpAddress <cimport, nodecl> end
global function sfIpAddress_fromInteger(address: sfUint32): sfIpAddress <cimport, nodecl> end
global function sfIpAddress_toString(address: sfIpAddress, string: cstring): void <cimport, nodecl> end
global function sfIpAddress_toInteger(address: sfIpAddress): sfUint32 <cimport, nodecl> end
global function sfIpAddress_getLocalAddress(): sfIpAddress <cimport, nodecl> end
global function sfIpAddress_getPublicAddress(timeout: sfTime): sfIpAddress <cimport, nodecl> end

global sfFtpTransferMode: type <cimport, nodecl, using> = @enum(cint) {
  sfFtpBinary = 0,
  sfFtpAscii,
  sfFtpEbcdic
}

global sfFtpStatus: type <cimport, nodecl, using> = @enum(cint) {
  sfFtpRestartMarkerReply          = 110,
  sfFtpServiceReadySoon            = 120,
  sfFtpDataConnectionAlreadyOpened = 125,
  sfFtpOpeningDataConnection       = 150,  
  sfFtpOk                    = 200,
  sfFtpPointlessCommand      = 202,
  sfFtpSystemStatus          = 211,
  sfFtpDirectoryStatus       = 212,
  sfFtpFileStatus            = 213,
  sfFtpHelpMessage           = 214,
  sfFtpSystemType            = 215,
  sfFtpServiceReady          = 220,
  sfFtpClosingConnection     = 221,
  sfFtpDataConnectionOpened  = 225,
  sfFtpClosingDataConnection = 226,
  sfFtpEnteringPassiveMode   = 227,
  sfFtpLoggedIn              = 230,
  sfFtpFileActionOk          = 250,
  sfFtpDirectoryOk           = 257,
  sfFtpNeedPassword       = 331,
  sfFtpNeedAccountToLogIn = 332,
  sfFtpNeedInformation    = 350,

  sfFtpServiceUnavailable        = 421,
  sfFtpDataConnectionUnavailable = 425,
  sfFtpTransferAborted           = 426,
  sfFtpFileActionAborted         = 450,
  sfFtpLocalError                = 451,
  sfFtpInsufficientStorageSpace  = 452,
  sfFtpCommandUnknown          = 500,
  sfFtpParametersUnknown       = 501,
  sfFtpCommandNotImplemented   = 502,
  sfFtpBadCommandSequence      = 503,
  sfFtpParameterNotImplemented = 504,
  sfFtpNotLoggedIn             = 530,
  sfFtpNeedAccountToStore      = 532,
  sfFtpFileUnavailable         = 550,
  sfFtpPageTypeUnknown         = 551,
  sfFtpNotEnoughMemory         = 552,
  sfFtpFilenameNotAllowed      = 553,
  sfFtpInvalidResponse  = 1000,
  sfFtpConnectionFailed = 1001,
  sfFtpConnectionClosed = 1002,
  sfFtpInvalidFile      = 1003
}

global function sfFtpListingResponse_destroy(ftpListingResponse: *sfFtpListingResponse): void <cimport, nodecl> end
global function sfFtpListingResponse_isOk(ftpListingResponse: *sfFtpListingResponse <const>): sfBool <cimport, nodecl> end
global function sfFtpListingResponse_getStatus(ftpListingResponse: *sfFtpListingResponse <const>): sfFtpStatus <cimport, nodecl> end
global function sfFtpListingResponse_getMessage(ftpListingResponse: *sfFtpListingResponse <const>): cstring <cimport, nodecl> end
global function sfFtpListingResponse_getCount(ftpListingResponse: *sfFtpListingResponse <const>): csize <cimport, nodecl> end
global function sfFtpListingResponse_getName(ftpListingResponse: *sfFtpListingResponse <const>, index: csize): cstring <cimport, nodecl> end
global function sfFtpDirectoryResponse_destroy(ftpListingResponse: *sfFtpListingResponse): void <cimport, nodecl> end
global function sfFtpDirectoryResponse_isOk(ftpListingResponse: *sfFtpDirectoryResponse <const>): sfBool <cimport, nodecl> end
global function sfFtpDirectoryResponse_getStatus(ftpListingResponse: *sfFtpDirectoryResponse <const>): sfFtpStatus <cimport, nodecl> end
global function sfFtpDirectoryResponse_getMessage(ftpListingResponse: *sfFtpDirectoryResponse <const>): cstring <cimport, nodecl> end
global function sfFtpDirectoryResponse_getDirectory(ftpListingResponse: *sfFtpDirectoryResponse <const>): cstring <cimport, nodecl> end
global function sfFtpResponse_destroy(ftpResponse: *sfFtpResponse): void <cimport, nodecl> end
global function sfFtpResponse_isOk(ftpResponse: *sfFtpResponse <const>): sfBool <cimport, nodecl> end
global function sfFtpResponse_getStatus(ftpResponse: *sfFtpResponse <const>): sfFtpStatus <cimport, nodecl> end
global function sfFtpResponse_getMessage(ftpResponse: *sfFtpResponse <const>): cstring <cimport, nodecl> end
global function sfFtp_create(): *sfFtp <cimport, nodecl> end
global function sfFtp_destroy(ftp: *sfFtp): void <cimport, nodecl> end
global function sfFtp_connect(ftp: *sfFtp, server: sfIpAddress, port: cushort, timeout: sfTime): *sfFtpResponse <cimport, nodecl> end
global function sfFtp_loginAnonymous(ftp: *sfFtp): *sfFtpResponse <cimport, nodecl> end
global function sfFtp_login(ftp: *sfFtp, name: cstring <const>, password: cstring <const>): *sfFtpResponse <cimport, nodecl> end
global function sfFtp_disconnect(ftp: *sfFtp): *sfFtpResponse <cimport, nodecl> end
global function sfFtp_keepAlive(ftp: *sfFtp): *sfFtpResponse <cimport, nodecl> end
global function sfFtp_getWorkingDirectory(ftp: *sfFtp): *sfFtpDirectoryResponse <cimport, nodecl> end
global function sfFtp_getDirectoryListing(ftp: *sfFtp, directory: cstring <const>): *sfFtpListingResponse <cimport, nodecl> end
global function sfFtp_changeDirectory(ftp: *sfFtp, directory: cstring <const>): *sfFtpResponse <cimport, nodecl> end
global function sfFtp_parentDirectory(ftp: *sfFtp): *sfFtpResponse <cimport, nodecl> end
global function sfFtp_createDirectory(ftp: *sfFtp, name: cstring <const>): *sfFtpResponse <cimport, nodecl> end
global function sfFtp_deleteDirectory(ftp: *sfFtp, name: cstring <const>): *sfFtpResponse <cimport, nodecl> end
global function sfFtp_renameFile(ftp: *sfFtp, file: cstring <const>, newName: cstring <const>): *sfFtpResponse <cimport, nodecl> end
global function sfFtp_deleteFile(ftp: *sfFtp, file: cstring <const>): *sfFtpResponse <cimport, nodecl> end
global function sfFtp_download(ftp: *sfFtp, remoteFile: cstring <const>, localPath: cstring <const>, mode: sfFtpTransferMode): *sfFtpResponse <cimport, nodecl> end
global function sfFtp_upload(ftp: *sfFtp, localFile: cstring <const>, remotePath: cstring <const>, mode: sfFtpTransferMode, append: sfBool): *sfFtpResponse <cimport, nodecl> end
global function sfFtp_sendCommand(ftp: *sfFtp, command: cstring <const>, parameter: cstring <const>): *sfFtpResponse <cimport, nodecl> end

global sfHttpMethod: type <cimport, nodecl, using> = @enum(cint) {
  sfHttpGet = 0,
  sfHttpPost,
  sfHttpHead,
  sfHttpPut,
  sfHttpDelete
}

global sfHttpStatus: type <cimport, nodecl, using> = @enum(cint) {
  sfHttpOk             = 200,
  sfHttpCreated        = 201,
  sfHttpAccepted       = 202,
  sfHttpNoContent      = 204,
  sfHttpResetContent   = 205,
  sfHttpPartialContent = 206,

  sfHttpMultipleChoices  = 300,
  sfHttpMovedPermanently = 301,
  sfHttpMovedTemporarily = 302,
  sfHttpNotModified      = 304,

  sfHttpBadRequest          = 400,
  sfHttpUnauthorized        = 401,
  sfHttpForbidden           = 403,
  sfHttpNotFound            = 404,
  sfHttpRangeNotSatisfiable = 407,

  sfHttpInternalServerError = 500,
  sfHttpNotImplemented      = 501,
  sfHttpBadGateway          = 502,
  sfHttpServiceNotAvailable = 503,
  sfHttpGatewayTimeout      = 504,
  sfHttpVersionNotSupported = 505,

  sfHttpInvalidResponse  = 1000,
  sfHttpConnectionFailed = 1001
}

global function sfHttpRequest_create(): *sfHttpRequest <cimport, nodecl> end
global function sfHttpRequest_destroy(httpRequest: *sfHttpRequest): void <cimport, nodecl> end
global function sfHttpRequest_setField(httpRequest: *sfHttpRequest, field: cstring <const>, value: cstring <const>): void <cimport, nodecl> end
global function sfHttpRequest_setMethod(httpRequest: *sfHttpRequest, method: sfHttpMethod): void <cimport, nodecl> end
global function sfHttpRequest_setUri(httpRequest: *sfHttpRequest, uri: cstring <const>): void <cimport, nodecl> end
global function sfHttpRequest_setHttpVersion(httpRequest: *sfHttpRequest, major: cuint, minor: cuint): void <cimport, nodecl> end
global function sfHttpRequest_setBody(httpRequest: *sfHttpRequest, body: cstring <const>): void <cimport, nodecl> end

global function sfHttpResponse_destroy(httpResponse: *sfHttpResponse): void <cimport, nodecl> end
global function sfHttpResponse_getField(httpResponse: *sfHttpResponse <const>, field: cstring <const>): cstring <cimport, nodecl> end
global function sfHttpResponse_getStatus(httpResponse: *sfHttpResponse <const>): sfHttpStatus <cimport, nodecl> end
global function sfHttpResponse_getMajorVersion(httpResponse: *sfHttpResponse <const>): cuint <cimport, nodecl> end
global function sfHttpResponse_getMinorVersion(httpResponse: *sfHttpResponse <const>): cuint <cimport, nodecl> end
global function sfHttpResponse_getBody(httpResponse: *sfHttpResponse <const>): cstring <cimport, nodecl> end
global function sfHttp_create(): *sfHttp <cimport, nodecl> end
global function sfHttp_destroy(http: *sfHttp): void <cimport, nodecl> end
global function sfHttp_setHost(http: *sfHttp, host: cstring <const>, port: cuint): void <cimport, nodecl> end
global function sfHttp_sendRequest(http: *sfHttp, request: *sfHttpRequest <const>, timeout: sfTime): *sfHttpResponse <cimport, nodecl> end

global function sfPacket_create(): *sfPacket <cimport, nodecl> end
global function sfPacket_copy(packet: *sfPacket <const>): *sfPacket <cimport, nodecl> end
global function sfPacket_destroy(packet: *sfPacket): void <cimport, nodecl> end
global function sfPacket_append(packet: *sfPacket, data: pointer, sizeInBytes: csize): void <cimport, nodecl> end
global function sfPacket_clear(packet: *sfPacket): void <cimport, nodecl> end
global function sfPacket_getData(packet: *sfPacket <const>): pointer <cimport, nodecl> end
global function sfPacket_getDataSize(packet: *sfPacket <const>): csize <cimport, nodecl> end
global function sfPacket_endOfPacket(packet: *sfPacket <const>): sfBool <cimport, nodecl> end
global function sfPacket_canRead(packet: *sfPacket <const>): sfBool <cimport, nodecl> end
global function sfPacket_readBool(packet: *sfPacket): sfBool <cimport, nodecl> end
global function sfPacket_readInt8(packet: *sfPacket): sfInt8 <cimport, nodecl> end
global function sfPacket_readUint8(packet: *sfPacket): sfUint8 <cimport, nodecl> end
global function sfPacket_readInt16(packet: *sfPacket): sfInt16 <cimport, nodecl> end
global function sfPacket_readUint16(packet: *sfPacket): sfUint16 <cimport, nodecl> end
global function sfPacket_readInt32(packet: *sfPacket): sfInt32 <cimport, nodecl> end
global function sfPacket_readUint32(packet: *sfPacket): sfUint32 <cimport, nodecl> end
global function sfPacket_readFloat(packet: *sfPacket): float32 <cimport, nodecl> end
global function sfPacket_readDouble(packet: *sfPacket): float64 <cimport, nodecl> end
global function sfPacket_readString(packet: *sfPacket, str: cstring): void <cimport, nodecl> end
global function sfPacket_readWideString(packet: *sfPacket, str: *[0]cint): void <cimport, nodecl> end
global function sfPacket_writeBool(packet: *sfPacket, data: sfBool): void <cimport, nodecl> end
global function sfPacket_writeInt8(packet: *sfPacket, data: sfInt8): void <cimport, nodecl> end
global function sfPacket_writeUint8(packet: *sfPacket, data: sfUint8): void <cimport, nodecl> end
global function sfPacket_writeInt16(packet: *sfPacket, data: sfInt16): void <cimport, nodecl> end
global function sfPacket_writeUint16(packet: *sfPacket, data: sfUint16): void <cimport, nodecl> end
global function sfPacket_writeInt32(packet: *sfPacket, data: sfInt32): void <cimport, nodecl> end
global function sfPacket_writeUint32(packet: *sfPacket, data: sfUint32): void <cimport, nodecl> end
global function sfPacket_writeFloat(packet: *sfPacket, data: float32): void <cimport, nodecl> end
global function sfPacket_writeDouble(packet: *sfPacket, data: float64): void <cimport, nodecl> end
global function sfPacket_writeString(packet: *sfPacket, data: cstring <const>): void <cimport, nodecl> end
global function sfPacket_writeWideString(packet: *sfPacket, data: *[0]cint): void <cimport, nodecl> end

global sfSocketStatus: type <cimport, nodecl, using> = @enum(cint) {
  sfSocketDone = 0,
  sfSocketNotReady,
  sfSocketPartial,
  sfSocketDisconnected,
  sfSocketError
}

global function sfSocketSelector_create(): *sfSocketSelector <cimport, nodecl> end
global function sfSocketSelector_copy(selector: *sfSocketSelector <const>): *sfSocketSelector <cimport, nodecl> end
global function sfSocketSelector_destroy(selector: *sfSocketSelector): void <cimport, nodecl> end
global function sfSocketSelector_addTcpListener(selector: *sfSocketSelector, socket: *sfTcpListener): void <cimport, nodecl> end
global function sfSocketSelector_addTcpSocket(selector: *sfSocketSelector, socket: *sfTcpSocket): void <cimport, nodecl> end
global function sfSocketSelector_addUdpSocket(selector: *sfSocketSelector, socket: *sfUdpSocket): void <cimport, nodecl> end
global function sfSocketSelector_removeTcpListener(selector: *sfSocketSelector, socket: *sfTcpListener): void <cimport, nodecl> end
global function sfSocketSelector_removeTcpSocket(selector: *sfSocketSelector, socket: *sfTcpSocket): void <cimport, nodecl> end
global function sfSocketSelector_removeUdpSocket(selector: *sfSocketSelector, socket: *sfUdpSocket): void <cimport, nodecl> end
global function sfSocketSelector_clear(selector: *sfSocketSelector): void <cimport, nodecl> end
global function sfSocketSelector_wait(selector: *sfSocketSelector, timeout: sfTime): sfBool <cimport, nodecl> end
global function sfSocketSelector_isTcpListenerReady(selector: *sfSocketSelector <const>, socket: *sfTcpListener): void <cimport, nodecl> end
global function sfSocketSelector_isTcpSocketReady(selector: *sfSocketSelector <const>, socket: *sfTcpSocket): void <cimport, nodecl> end
global function sfSocketSelector_isUdpSocketReady(selector: *sfSocketSelector <const>, socket: *sfUdpSocket): void <cimport, nodecl> end

global function sfTcpListener_create(): *sfTcpListener <cimport, nodecl> end
global function sfTcpListener_destroy(listener: *sfTcpListener): void <cimport, nodecl> end
global function sfTcpListener_setBlocking(listener: *sfTcpListener, blocking: sfBool): void <cimport, nodecl> end
global function sfTcpListener_isBlocking(listener: *sfTcpListener <const>): sfBool <cimport, nodecl> end
global function sfTcpListener_getLocalPort(listener: *sfTcpListener <const>): cushort <cimport, nodecl> end
global function sfTcpListener_listen(listener: *sfTcpListener <const>, port: cushort, address: sfIpAddress): sfSocketStatus <cimport, nodecl> end
global function sfTcpListener_accept(listener: *sfTcpListener <const>, connected: *[0]*sfTcpSocket): sfSocketStatus <cimport, nodecl> end

global function sfTcpSocket_create(): *sfTcpSocket <cimport, nodecl> end
global function sfTcpSocket_destroy(socket: *sfTcpSocket): void <cimport, nodecl> end
global function sfTcpSocket_setBlocking(socket: *sfTcpSocket, blocking: sfBool): void <cimport, nodecl> end
global function sfTcpSocket_isBlocking(socket: *sfTcpSocket <const>): sfBool <cimport, nodecl> end
global function sfTcpSocket_getLocalPort(socket: *sfTcpSocket <const>): cushort <cimport, nodecl> end
global function sfTcpSocket_getRemoteAddress(socket: *sfTcpSocket <const>): sfIpAddress <cimport, nodecl> end
global function sfTcpSocket_getRemotePort(socket: *sfTcpSocket <const>): cushort <cimport, nodecl> end
global function sfTcpSocket_connect(socket: *sfTcpSocket, remoteAddress: sfIpAddress, remotePort: cushort, timeout: sfTime): sfSocketStatus <cimport, nodecl> end
global function sfTcpSocket_disconnect(socket: *sfTcpSocket): void <cimport, nodecl> end
global function sfTcpSocket_send(socket: *sfTcpSocket, data: pointer <const>, size: csize): sfSocketStatus <cimport, nodecl> end
global function sfTcpSocket_sendPartial(socket: *sfTcpSocket, data: pointer <const>, size: csize, received: *csize): sfSocketStatus <cimport, nodecl> end
global function sfTcpSocket_receive(socket: *sfTcpSocket, data: pointer <const>, size: csize, received: *csize): sfSocketStatus <cimport, nodecl> end
global function sfTcpSocket_sendPacket(socket: *sfTcpSocket, packet: *sfPacket): sfSocketStatus <cimport, nodecl> end
global function sfTcpSocket_receivePacket(socket: *sfTcpSocket, packet: *sfPacket): sfSocketStatus <cimport, nodecl> end

global function sfUdpSocket_create(): *sfUdpSocket <cimport, nodecl> end
global function sfUdpSocket_destroy(socket: *sfUdpSocket): void <cimport, nodecl> end
global function sfUdpSocket_setBlocking(socket: *sfUdpSocket, blocking: sfBool): void <cimport, nodecl> end
global function sfUdpSocket_isBlocking(socket: *sfUdpSocket <const>): sfBool <cimport, nodecl> end
global function sfUdpSocket_getLocalPort(socket: *sfUdpSocket <const>): cushort <cimport, nodecl> end
global function sfUdpSocket_bind(socket: *sfUdpSocket <const>, port: cushort, address: sfIpAddress): sfSocketStatus <cimport, nodecl> end
global function sfUdpSocket_unbind(socket: *sfUdpSocket): void <cimport, nodecl> end
global function sfUdpSocket_send(socket: *sfUdpSocket, data: pointer<const>, size: csize, remoteAddress: sfIpAddress, remotePort: cushort): sfSocketStatus <cimport, nodecl> end
global function sfUdpSocket_receive(socket: *sfUdpSocket, data: pointer, size: csize, received: *csize, remoteAddress: *sfIpAddress, remotePort: *cushort): sfSocketStatus <cimport, nodecl> end
global function sfUdpSocket_sendPacket(socket: *sfUdpSocket, packet: *sfPacket, remoteAddress: sfIpAddress, remotePort: cushort): sfSocketStatus <cimport, nodecl> end
global function sfUdpSocket_receivePacket(socket: *sfUdpSocket, packet: *sfPacket, remoteAddress: *sfIpAddress, remotePort: *cushort): sfSocketStatus <cimport, nodecl> end
global function sfUdpSocket_maxDatagramSize(): cuint <cimport, nodecl> end
global function sfListener_setGlobalVolume(volume: float32): void <cimport, nodecl> end
global function sfListener_getGlobalVolume(): float32 <cimport, nodecl> end
global function sfListener_setPosition(position: sfVector3f): void <cimport, nodecl> end
global function sfListener_getPosition(): sfVector3f <cimport, nodecl> end
global function sfListener_setDirection(direction: sfVector3f): void <cimport, nodecl> end
global function sfListener_getDirection(): sfVector3f <cimport, nodecl> end
global function sfListener_setUpVector(upVector: sfVector3f): void <cimport, nodecl> end
global function sfListener_getUpVector(): sfVector3f <cimport, nodecl> end

global sfSoundStatus: type <cimport, nodecl, using> = @enum(cint) {
  sfStopped = 0,
  sfPaused,
  sfPlaying
}

global sfMusic: type <cimport, nodecl, forwarddecl> = @record {}
global sfSound: type <cimport, nodecl, forwarddecl> = @record {}
global sfSoundBuffer: type <cimport, nodecl, forwarddecl> = @record {}
global sfSoundBufferRecorder: type <cimport, nodecl, forwarddecl> = @record {}
global sfSoundRecorder: type <cimport, nodecl, forwarddecl> = @record {}
global sfSoundStream: type <cimport, nodecl, forwarddecl> = @record {}

global sfTimeSpan: type <cimport, nodecl> = @record {
  offset: sfTime,
  length: sfTime
}

global function sfMusic_createFromFile(filename: cstring <const>): *sfMusic <cimport, nodecl> end
global function sfMusic_createFromMemory(data: pointer <const>, sizeInBytes: csize): *sfMusic <cimport, nodecl> end
global function sfMusic_createFromStream(stream: *sfInputStream): *sfMusic <cimport, nodecl> end
global function sfMusic_destroy(music: *sfMusic): void <cimport, nodecl> end
global function sfMusic_setLoop(music: *sfMusic, loop: sfBool): void <cimport, nodecl> end
global function sfMusic_getLoop(music: *sfMusic <const>): sfBool <cimport, nodecl> end
global function sfMusic_getDuration(music: *sfMusic <const>): sfTime <cimport, nodecl> end
global function sfMusic_getLoopPoints(music: *sfMusic <const>): sfTimeSpan <cimport, nodecl> end
global function sfMusic_setLoopPoints(music: *sfMusic, timePoints: sfTimeSpan): void <cimport, nodecl> end
global function sfMusic_play(music: *sfMusic): void <cimport, nodecl> end
global function sfMusic_pause(music: *sfMusic): void <cimport, nodecl> end
global function sfMusic_stop(music: *sfMusic): void <cimport, nodecl> end
global function sfMusic_getChannelCount(music: *sfMusic <const>): cuint <cimport, nodecl> end
global function sfMusic_getSampleRate(music: *sfMusic <const>): cuint <cimport, nodecl> end
global function sfMusic_getStatus(music: *sfMusic <const>): sfSoundStatus <cimport, nodecl> end
global function sfMusic_getPlayingOffset(music: *sfMusic <const>): sfTime <cimport, nodecl> end
global function sfMusic_setPitch(music: *sfMusic, pitch: float32): void <cimport, nodecl> end
global function sfMusic_setVolume(music: *sfMusic, volume: float32): void <cimport, nodecl> end
global function sfMusic_setPosition(music: *sfMusic, position: sfVector3f): void <cimport, nodecl> end
global function sfMusic_setRelativeToListener(music: *sfMusic, relative: sfBool): void <cimport, nodecl> end
global function sfMusic_setMinDistance(music: *sfMusic, distance: float32): void <cimport, nodecl> end
global function sfMusic_setAttenuation(music: *sfMusic, attenuation: float32): void <cimport, nodecl> end
global function sfMusic_setPlayingOffset(music: *sfMusic, timeOffset: sfTime): void <cimport, nodecl> end
global function sfMusic_getPitch(music: *sfMusic <const>): float32 <cimport, nodecl> end
global function sfMusic_getVolume(music: *sfMusic <const>): float32 <cimport, nodecl> end
global function sfMusic_getPosition(music: *sfMusic <const>): sfVector3f <cimport, nodecl> end
global function sfMusic_isRelativeToListener(music: *sfMusic <const>): sfBool <cimport, nodecl> end
global function sfMusic_getMinDistance(music: *sfMusic <const>): float32 <cimport, nodecl> end
global function sfMusic_getAttenuation(music: *sfMusic <const>): float32 <cimport, nodecl> end

global function sfSound_create(): *sfSound <cimport, nodecl> end
global function sfSound_copy(sound: *sfSound <const>): *sfSound <cimport, nodecl> end
global function sfSound_destroy(sound: *sfSound): void <cimport, nodecl> end
global function sfSound_play(sound: *sfSound): void <cimport, nodecl> end
global function sfSound_pause(sound: *sfSound): void <cimport, nodecl> end
global function sfSound_stop(sound: *sfSound): void <cimport, nodecl> end
global function sfSound_setBuffer(sound: *sfSound, buffer: *sfSoundBuffer <const>): void <cimport, nodecl> end
global function sfSound_getBuffer(sound: *sfSound <const>): *sfSoundBuffer <cimport, nodecl> end
global function sfSound_setLoop(sound: *sfSound, loop: sfBool): void <cimport, nodecl> end
global function sfSound_getLoop(sound: *sfSound <const>): sfBool <cimport, nodecl> end
global function sfSound_getStatus(sound: *sfSound <const>): sfSoundStatus <cimport, nodecl> end
global function sfSound_setPitch(sound: *sfSound, pitch: float32): void <cimport, nodecl> end
global function sfSound_setVolume(sound: *sfSound, volume: float32): void <cimport, nodecl> end
global function sfSound_setPosition(sound: *sfSound, position: sfVector3f): void <cimport, nodecl> end
global function sfSound_setRelativeToListener(sound: *sfSound, relative: sfBool): void <cimport, nodecl> end
global function sfSound_setMinDistance(sound: *sfSound, distance: float32): void <cimport, nodecl> end
global function sfSound_setAttenuation(sound: *sfSound, attenuation: float32): void <cimport, nodecl> end
global function sfSound_setPlayingOffset(sound: *sfSound, timeOffset: sfTime): void <cimport, nodecl> end
global function sfSound_getPitch(sound: *sfSound <const>): float32 <cimport, nodecl> end
global function sfSound_getVolume(sound: *sfSound <const>): float32 <cimport, nodecl> end
global function sfSound_getPosition(sound: *sfSound <const>): sfVector3f <cimport, nodecl> end
global function sfSound_isRelativeToListener(sound: *sfSound <const>): sfBool <cimport, nodecl> end
global function sfSound_getMinDistance(sound: *sfSound <const>): float32 <cimport, nodecl> end
global function sfSound_getAttenuation(sound: *sfSound <const>): float32 <cimport, nodecl> end
global function sfSound_getPlayingOffset(sound: *sfSound <const>): sfTime <cimport, nodecl> end

global function sfSoundBuffer_createFromFile(filename: cstring <const>): *sfSoundBuffer <cimport, nodecl> end
global function sfSoundBuffer_createFromMemory(data: pointer <const>, sizeInBytes: csize): *sfSoundBuffer <cimport, nodecl> end
global function sfSoundBuffer_createFromStream(stream: *sfInputStream): *sfSoundBuffer <cimport, nodecl> end
global function sfSoundBuffer_createFromSamples(samples: *[0]sfInt16, sampleCount: sfUint64, channelCount: cuint, sampleRate: cuint): *sfSoundBuffer <cimport, nodecl> end
global function sfSoundBuffer_copy(soundBuffer: *sfSoundBuffer <const>): *sfSoundBuffer <cimport, nodecl> end
global function sfSoundBuffer_destroy(soundBuffer: *sfSoundBuffer): void <cimport, nodecl> end
global function sfSoundBuffer_saveToFile(soundBuffer: *sfSoundBuffer <const>, filename: cstring <const>): sfBool <cimport, nodecl> end
global function sfSoundBuffer_getSamples(soundBuffer: *sfSoundBuffer <const>): *[0]sfInt16 <cimport, nodecl> end
global function sfSoundBuffer_getSampleCount(soundBuffer: *sfSoundBuffer <const>): sfUint64 <cimport, nodecl> end
global function sfSoundBuffer_getSampleRate(soundBuffer: *sfSoundBuffer <const>): cuint <cimport, nodecl> end
global function sfSoundBuffer_getChannelCount(soundBuffer: *sfSoundBuffer <const>): cuint <cimport, nodecl> end
global function sfSoundBuffer_getDuration(soundBuffer: *sfSoundBuffer <const>): sfTime <cimport, nodecl> end

global function sfSoundBufferRecorder_create(): *sfSoundBufferRecorder <cimport, nodecl> end
global function sfSoundBufferRecorder_destroy(soundBufferRecorder: *sfSoundBufferRecorder): void <cimport, nodecl> end
global function sfSoundBufferRecorder_start(soundBufferRecorder: *sfSoundBufferRecorder, sampleRate: cuint): sfBool <cimport, nodecl> end
global function sfSoundBufferRecorder_stop(soundBufferRecorder: *sfSoundBufferRecorder): void <cimport, nodecl> end
global function sfSoundBufferRecorder_getSampleRate(soundBufferRecorder: *sfSoundBufferRecorder <const>): cuint <cimport, nodecl> end
global function sfSoundBufferRecorder_getBuffer(soundBufferRecorder: *sfSoundBufferRecorder <const>): *sfSoundBuffer <cimport, nodecl> end
global function sfSoundBufferRecorder_setDevice(soundBufferRecorder: *sfSoundBufferRecorder <const>, name: cstring <const>): sfBool <cimport, nodecl> end
global function sfSoundBufferRecorder_getDevice(soundBufferRecorder: *sfSoundBufferRecorder): cstring <cimport, nodecl> end

global sfSoundRecorderStartCallback: type <cimport, nodecl> = @function(pointer): sfBool
global sfSoundRecorderProcessCallback: type <cimport, nodecl> = @function(*[0]sfInt16, csize, pointer): sfBool
global sfSoundRecorderStopCallback: type <cimport, nodecl> = @function(pointer): void

global function sfSoundRecorder_create(onStart: sfSoundRecorderStartCallback, onProcess: sfSoundRecorderProcessCallback, onStop: sfSoundRecorderStopCallback, userData: pointer): *sfSoundRecorder <cimport, nodecl> end
global function sfSoundRecorder_destroy(soundRecorder: *sfSoundRecorder): void <cimport, nodecl> end
global function sfSoundRecorder_start(soundRecorder: *sfSoundRecorder, sampleRate: cuint): sfBool <cimport, nodecl> end
global function sfSoundRecorder_stop(soundRecorder: *sfSoundRecorder): void <cimport, nodecl> end
global function sfSoundRecorder_getSampleRate(soundRecorder: *sfSoundRecorder <const>): cuint <cimport, nodecl> end
global function sfSoundRecorder_isAvailable(): sfBool <cimport, nodecl> end
global function sfSoundRecorder_setProcessingInterval(soundRecorder: *sfSoundRecorder, interval: sfTime): void <cimport, nodecl> end
global function sfSoundRecorder_getAvailableDevices(count: csize): *[0]cstring <cimport, nodecl> end
global function sfSoundRecorder_getDefaultDevice(): cstring <cimport, nodecl> end
global function sfSoundRecorder_setDevice(soundRecorder: *sfSoundRecorder, name: cstring <const>): sfBool <cimport, nodecl> end
global function sfSoundRecorder_getDevice(soundRecorder: *sfSoundRecorder): cstring <cimport, nodecl> end
global function sfSoundRecorder_setChannelCount(soundRecorder: *sfSoundRecorder, channelCount: cuint): void <cimport, nodecl> end
global function sfSoundRecorder_getChannelCount(soundRecorder: *sfSoundRecorder <const>): cuint <cimport, nodecl> end

global sfSoundStreamChunk: type <cimport, nodecl> = @record {
  samples: *[0]sfInt16,
  sampleCount: cuint
}

global sfSoundStreamGetDataCallback: type <cimport, nodecl> = @function(*sfSoundStreamChunk, pointer): sfBool
global sfSoundStreamSeekCallback: type <cimport, nodecl> = @function(sfTime, pointer): void

global function sfSoundStream_create(onGetData: sfSoundStreamGetDataCallback, onSeek: sfSoundStreamSeekCallback, channelCount: cuint, sampleRate: cuint, userData: pointer): *sfSoundStream <cimport, nodecl> end
global function sfSoundStream_destroy(soundStream: *sfSoundStream): void <cimport, nodecl> end
global function sfSoundStream_play(soundStream: *sfSoundStream): void <cimport, nodecl> end
global function sfSoundStream_pause(soundStream: *sfSoundStream): void <cimport, nodecl> end
global function sfSoundStream_stop(soundStream: *sfSoundStream): void <cimport, nodecl> end
global function sfSoundStream_getStatus(soundStream: *sfSoundStream <const>): sfSoundStatus <cimport, nodecl> end
global function sfSoundStream_getChannelCount(soundStream: *sfSoundStream <const>): cuint <cimport, nodecl> end
global function sfSoundStream_setPitch(soundStream: *sfSoundStream, pitch: float32): void <cimport, nodecl> end
global function sfSoundStream_setVolume(soundStream: *sfSoundStream, volume: float32): void <cimport, nodecl> end
global function sfSoundStream_setPosition(soundStream: *sfSoundStream, position: sfVector3f): void <cimport, nodecl> end
global function sfSoundStream_setRelativeToListener(soundStream: *sfSoundStream, relative: sfBool): void <cimport, nodecl> end
global function sfSoundStream_setMinDistance(soundStream: *sfSoundStream, distance: float32): void <cimport, nodecl> end
global function sfSoundStream_setAttenuation(soundStream: *sfSoundStream, attenuation: float32): void <cimport, nodecl> end
global function sfSoundStream_setPlayingOffset(soundStream: *sfSoundStream, timeOffset: sfTime): void <cimport, nodecl> end
global function sfSoundStream_setLoop(soundStream: *sfSoundStream, loop: sfBool): void <cimport, nodecl> end
global function sfSoundStream_getPitch(soundStream: *sfSoundStream <const>): float32 <cimport, nodecl> end
global function sfSoundStream_getVolume(soundStream: *sfSoundStream <const>): float32 <cimport, nodecl> end
global function sfSoundStream_getPosition(soundStream: *sfSoundStream <const>): sfVector3f <cimport, nodecl> end
global function sfSoundStream_isRelativeToListener(soundStream: *sfSoundStream <const>): sfBool <cimport, nodecl> end
global function sfSoundStream_getMinDistance(soundStream: *sfSoundStream <const>): float32 <cimport, nodecl> end
global function sfSoundStream_getAttenuation(soundStream: *sfSoundStream <const>): float32 <cimport, nodecl> end
global function sfSoundStream_getLoop(soundStream: *sfSoundStream <const>): sfBool <cimport, nodecl> end
global function sfSoundStream_getPlayingOffset(soundStream: *sfSoundStream <const>): sfTime <cimport, nodecl> end

global sfContext: type <cimport, nodecl, forwarddecl> = @record {}
global sfCursor: type <cimport, nodecl, forwarddecl> = @record {}
global sfWindow: type <cimport, nodecl, forwarddecl> = @record {}

global function sfClipboard_getString(): cstring <cimport, nodecl> end
global function sfClipboard_getUnicodeString(): *[0]sfUint32 <cimport, nodecl> end
global function sfClipboard_setString(text: cstring <const>): void <cimport, nodecl> end
global function sfClipboard_setUnicodeString(text: *[0]sfUint32): void <cimport, nodecl> end

## if ccinfo.is_apple then
global sfWindowHandle: type <cimport, nodecl> = @culong
## else
global sfWindowHandle: type <cimport, nodecl> = @pointer
## end

global sfVideoMode: type <cimport, nodecl> = @record {
  width: cuint,
  height: cuint,
  bitsPerPixel: cuint
}

global function sfVideoMode_getDesktopMode(): sfVideoMode <cimport, nodecl> end
global function sfVideoMode_getFullscreenModes(count: *csize): *[0]sfVideoMode <cimport, nodecl> end
global function sfVideoMode_isValid(mode: sfVideoMode): sfBool <cimport, nodecl> end

global sfJoystickIdentification: type <cimport, nodecl> = @record {
  name: cstring,
  vendorId: cuint,
  productId: cuint
}

global sfJoystickCount: cint <cimport, nodecl, const>
global sfJoystickButtonCount: cint <cimport, nodecl, const>
global sfJoystickAxisCount: cint <cimport, nodecl, const>

global sfJoystickAxis: type <cimport, nodecl, using> = @enum(cint) {
  sfJoystickX = 0,
  sfJoystickY,
  sfJoystickZ,
  sfJoystickR,
  sfJoystickU,
  sfJoystickV,
  sfJoystickPovX,
  sfJoystickPovY
}

global function sfJoystick_isConnected(joystick: cuint): sfBool <cimport, nodecl> end
global function sfJoystick_getButtonCount(joystick: cuint): cuint <cimport, nodecl> end
global function sfJoystick_hasAxis(joystick: cuint, axis: sfJoystickAxis): sfBool <cimport, nodecl> end
global function sfJoystick_isButtonPressed(joystick: cuint, button: cuint): sfBool <cimport, nodecl> end
global function sfJoystick_getAxisPosition(joystick: cuint, axis: sfJoystickAxis): float32 <cimport, nodecl> end
global function sfJoystick_getIdentification(joystick: cuint): sfJoystickIdentification <cimport, nodecl> end
global function sfJoystick_update(): void <cimport, nodecl> end

global sfKeyCode: type <cimport, nodecl, using> = @enum(cint) {
  sfKeyUnknown = -1,
  sfKeyA,
  sfKeyB,
  sfKeyC,
  sfKeyD,
  sfKeyE,
  sfKeyF,
  sfKeyG,
  sfKeyH,
  sfKeyI,
  sfKeyJ,
  sfKeyK,
  sfKeyL,
  sfKeyM,
  sfKeyN,
  sfKeyO,
  sfKeyP,
  sfKeyQ,
  sfKeyR,
  sfKeyS,
  sfKeyT,
  sfKeyU,
  sfKeyV,
  sfKeyW,
  sfKeyX,
  sfKeyY,
  sfKeyZ,
  sfKeyNum0,
  sfKeyNum1,
  sfKeyNum2,
  sfKeyNum3,
  sfKeyNum4,
  sfKeyNum5,
  sfKeyNum6,
  sfKeyNum7,
  sfKeyNum8,
  sfKeyNum9,
  sfKeyEscape,
  sfKeyLControl,
  sfKeyLShift,
  sfKeyLAlt,
  sfKeyLSystem,
  sfKeyRControl,
  sfKeyRShift,
  sfKeyRAlt,
  sfKeyRSystem,
  sfKeyMenu,
  sfKeyLBracket,
  sfKeyRBracket,
  sfKeySemicolon,
  sfKeyComma,
  sfKeyPeriod,
  sfKeyQuote,
  sfKeySlash,
  sfKeyBackslash,
  sfKeyTilde,
  sfKeyEqual,
  sfKeyHyphen,
  sfKeySpace,
  sfKeyEnter,
  sfKeyBackspace,
  sfKeyTab,
  sfKeyPageUp,
  sfKeyPageDown,
  sfKeyEnd,
  sfKeyHome,
  sfKeyInsert,
  sfKeyDelete,
  sfKeyAdd,
  sfKeySubtract,
  sfKeyMultiply,
  sfKeyDivide,
  sfKeyLeft,
  sfKeyRight,
  sfKeyUp,
  sfKeyDown,
  sfKeyNumpad0,
  sfKeyNumpad1,
  sfKeyNumpad2,
  sfKeyNumpad3,
  sfKeyNumpad4,
  sfKeyNumpad5,
  sfKeyNumpad6,
  sfKeyNumpad7,
  sfKeyNumpad8,
  sfKeyNumpad9,
  sfKeyF1,
  sfKeyF2,
  sfKeyF3,
  sfKeyF4,
  sfKeyF5,
  sfKeyF6,
  sfKeyF7,
  sfKeyF8,
  sfKeyF9,
  sfKeyF10,
  sfKeyF11,
  sfKeyF12,
  sfKeyF13,
  sfKeyF14,
  sfKeyF15,
  sfKeyPause,
  sfKeyCount
}

global sfKeyDash: cint <cimport, nodecl, const>
global sfKeyBack: cint <cimport, nodecl, const>
global sfKeyBackSlash: cint <cimport, nodecl, const>
global sfKeySemiColon: cint <cimport, nodecl, const>
global sfKeyReturn: cint <cimport, nodecl, const>

global function sfKeyboard_isKeyPressed(key: sfKeyCode): sfBool <cimport, nodecl> end
global function sfKeyboard_setVirtualKeyboardVisible(visible: sfBool): void <cimport, nodecl> end

global sfMouseButton: type <cimport, nodecl, using> = @enum(cint) {
  sfMouseLeft = 0,
  sfMouseRight,
  sfMouseMiddle,
  sfMouseXButton1,
  sfMouseXButton2,
  sfMouseButtonCount,
}

global sfMouseWheel: type <cimport, nodecl, using> = @enum(cint) {
  sfMouseVerticalWheel = 0,
  sfMouseHorizontalWheel
}

global function sfMouse_isButtonPressed(button: sfMouseButton): sfBool <cimport, nodecl> end
global function sfMouse_getPosition(relativeTo: *sfWindow <const>): sfVector2i <cimport, nodecl> end
global function sfMouse_setPosition(position: sfVector2i, relativeTo: *sfWindow <const>): void <cimport, nodecl> end

global sfCursorType: type <cimport, nodecl, using> = @enum(cint) {
  sfCursorArrow = 0,
  sfCursorArrowWait,
  sfCursorWait,
  sfCursorText,
  sfCursorHand,
  sfCursorSizeHorizontal,
  sfCursorSizeVertical,
  sfCursorSizeTopLeftBottomRight,
  sfCursorSizeBottomLeftTopRight,
  sfCursorSizeAll,
  sfCursorCross,
  sfCursorHelp,
  sfCursorNotAllowed
}

global function sfCursor_createFromPixels(pixels: *[0]sfUint8 <const>, size: sfVector2u, hotspot: sfVector2u): *sfCursor <cimport, nodecl> end
global function sfCursor_createFromSystem(cursor_type: sfCursorType): *sfCursor <cimport, nodecl> end
global function sfCursor_destroy(cursor: *sfCursor): void <cimport, nodecl> end

global sfSensorType: type <cimport, nodecl, using> = @enum(cint) {
  sfSensorAccelerometer = 0,
  sfSensorGyroscope,
  sfSensorMagnetometer,
  sfSensorGravity,
  sfSensorOrientation,
  sfSensorCount
}

global function sfSensor_isAvailable(sensor: sfSensorType): sfBool <cimport, nodecl> end
global function sfSensor_setEnabled(sensor: sfSensorType, enabled: sfBool): void <cimport, nodecl> end
global function sfSensor_getValue(sensor: sfSensorType): sfVector3f <cimport, nodecl> end

global function sfTouch_isDown(finger: cuint): sfBool <cimport, nodecl> end
global function sfTouch_getPosition(finger: cuint, relativeTo: *sfWindow <const>): sfVector2i <cimport, nodecl> end

global sfEventType: type <cimport, nodecl, using> = @enum(cint) {
  sfEvtClosed = 0,
  sfEvtResized,
  sfEvtLostFocus,
  sfEvtGainedFocus,
  sfEvtTextEntered,
  sfEvtKeyPressed,
  sfEvtKeyReleased,
  sfEvtMouseWheelMoved,
  sfEvtMouseWheelScrolled,
  sfEvtMouseButtonPressed,
  sfEvtMouseButtonReleased,
  sfEvtMouseMoved,
  sfEvtMouseEntered,
  sfEvtKeyPressed,
  sfEvtKeyReleased,
  sfEvtMouseWheelMoved,
  sfEvtMouseWheelScrolled,
  sfEvtMouseButtonPressed,
  sfEvtMouseButtonReleased,
  sfEvtMouseMoved,
  sfEvtMouseEntered,
  sfEvtMouseLeft,
  sfEvtJoystickButtonPressed,
  sfEvtJoystickButtonReleased,
  sfEvtJoystickMoved,
  sfEvtJoystickConnected,
  sfEvtJoystickDisconnected,
  sfEvtTouchBegan,
  sfEvtTouchMoved,
  sfEvtTouchEnded,
  sfEvtSensorChanged,
  sfEvtCount
}

global sfKeyEvent: type <cimport, nodecl> = @record {
  type: sfEventType,
  code: sfKeyCode,
  alt: sfBool,
  control: sfBool,
  shift: sfBool,
  system: sfBool
}

global sfTextEvent: type <cimport, nodecl> = @record {
  type: sfEventType,
  unicode: sfUint32
}

global sfMouseMoveEvent: type <cimport, nodecl> = @record {
  type: sfEventType,
  x: cint,
  y: cint
}

global sfMouseButtonEvent: type <cimport, nodecl> = @record {
  type: sfEventType,
  button: sfMouseButton,
  x: cint,
  y: cint
}

global sfMouseWheelEvent: type <cimport, nodecl> = @record {
  type: sfEventType,
  delta: cint,
  x: cint,
  y: cint
}

global sfMouseWheelScrollEvent: type <cimport, nodecl> = @record {
  type: sfEventType,
  wheel: sfMouseWheel,
  delta: cint,
  x: cint,
  y: cint
}

global sfJoystickMoveEvent: type <cimport, nodecl> = @record {
  type: sfEventType,
  joystickId: cuint,
  axis: sfJoystickAxis,
  position: float32
}

global sfJoystickButtonEvent: type <cimport, nodecl> = @record {
  type: sfEventType,
  joystickId: cuint,
  button: cuint
}

global sfJoystickConnectEvent: type <cimport, nodecl> = @record {
  type: sfEventType,
  joystickId: cuint
}

global sfSizeEvent: type <cimport, nodecl> = @record {
  type: sfEventType,
  width: cuint,
  height: cuint
}

global sfTouchEvent: type <cimport, nodecl> = @record {
  type: sfEventType,
  finger: cuint,
  x: cint,
  y: cint
}

global sfSensorEvent: type <cimport, nodecl> = @record {
  type: sfEventType,
  sensorType: sfSensorType,
  x: float32,
  y: float32,
  z: float32
}

global sfEvent: type <cimport,nodecl> = @union {
  type: sfEventType,
  size: sfSizeEvent,
  key: sfKeyEvent,
  text: sfTextEvent,
  mouseMove: sfMouseMoveEvent,
  mouseButton: sfMouseButtonEvent,
  mouseWheel: sfMouseWheelEvent,
  mouseWheelScroll: sfMouseWheelScrollEvent,
  joystickMove: sfJoystickMoveEvent,
  joystickButton: sfJoystickButtonEvent,
  joystickConnect: sfJoystickConnectEvent,
  touch: sfTouchEvent,
  sensor: sfSensorEvent,
}

global sfWindowStyle: type <cimport, nodecl, using> = @enum(cint) {
  sfNone = 0,
  sfTitlebar = 1 << 0,
  sfResize = 1 << 1,
  sfClose = 1 << 2,
  sfFullscreen = 1 << 3
}

global sfDefaultStyle: cint <cimport, nodecl, const>

global sfContextAttribute: type <cimport, nodecl, using> = @enum(cint) {
  sfContextDefault = 0,
  sfContextCore = 1 << 0,
  sfContextDebug = 1 << 2,
}

global sfContextSettings: type <cimport, nodecl> = @record {
  depthBits: cuint,
  stencilBits: cuint,
  antialiasingLevel: cuint,
  majorVersion: cuint,
  minorVersion: cuint,
  attributeFlags: sfUint32,
  sRgbCapable: sfBool,
}

global function sfWindow_create(mode: sfVideoMode, title: cstring <const>, style: sfUint32, settings: *sfContextSettings <const>): *sfWindow <cimport, nodecl> end
global function sfWindow_createUnicode(mode: sfVideoMode, title: *[0]sfUint32 <const>, style: sfUint32, settings: *sfContextSettings <const>): *sfWindow <cimport, nodecl> end
global function sfWindow_createFromHandle(handle: sfWindowHandle, settings: *sfContextSettings <const>): *sfWindow <cimport, nodecl> end
global function sfWindow_destroy(window: *sfWindow): void <cimport, nodecl> end
global function sfWindow_close(window: *sfWindow): void <cimport, nodecl> end
global function sfWindow_isOpen(window: *sfWindow <const>): sfBool <cimport, nodecl> end
global function sfWindow_getSettings(window: *sfWindow <const>): sfContextSettings <cimport, nodecl> end
global function sfWindow_pollEvent(window: *sfWindow, event: *sfEvent): sfBool <cimport, nodecl> end
global function sfWindow_waitEvent(window: *sfWindow, event: *sfEvent): sfBool <cimport, nodecl> end
global function sfWindow_getPosition(window: *sfWindow <const>): sfVector2i <cimport, nodecl> end
global function sfWindow_setPosition(window: *sfWindow, position: sfVector2i): void <cimport, nodecl> end
global function sfWindow_getSize(window: *sfWindow <const>): sfVector2u <cimport, nodecl> end
global function sfWindow_setSize(window: *sfWindow, size: sfVector2u): void <cimport, nodecl> end
global function sfWindow_setTitle(window: *sfWindow, title: cstring <const>): void <cimport, nodecl> end
global function sfWindow_setUnicodeTitle(window: *sfWindow, title: *[0]sfUint32 <const>): void <cimport, nodecl> end
global function sfWindow_setIcon(window: *sfWindow, width: cuint, height: cuint, pixels: *[0]sfUint8): void <cimport, nodecl> end
global function sfWindow_setVisible(window: *sfWindow, visible: sfBool): void <cimport, nodecl> end
global function sfWindow_setVerticalSyncEnabled(window: *sfWindow, enabled: sfBool): void <cimport, nodecl> end
global function sfWindow_setMouseCursorVisible(window: *sfWindow, visible: sfBool): void <cimport, nodecl> end
global function sfWindow_setMouseCursorGrabbed(window: *sfWindow, grabbed: sfBool): void <cimport, nodecl> end
global function sfWindow_setMouseCursor(window: *sfWindow, cursor: *sfCursor <const>): void <cimport, nodecl> end
global function sfWindow_setKeyRepeatEnabled(window: *sfWindow, enabled: sfBool): void <cimport, nodecl> end
global function sfWindow_setFramerateLimit(window: *sfWindow, threshold: float32): void <cimport, nodecl> end
global function sfWindow_setActive(window: *sfWindow, active: sfBool): void <cimport, nodecl> end
global function sfWindow_requestFocus(window: *sfWindow): void <cimport, nodecl> end
global function sfWindow_hasFocus(window: *sfWindow <const>): sfBool <cimport, nodecl> end
global function sfWindow_display(window: *sfWindow): void <cimport, nodecl> end
global function sfWindow_getSystemHandle(window: *sfWindow <const>): sfWindowHandle <cimport, nodecl> end

global function sfContext_create(): *sfContext <cimport, nodecl> end
global function sfContext_destroy(context: *sfContext): void <cimport, nodecl> end
global function sfContext_setActive(context: *sfContext, active: sfBool): sfBool <cimport, nodecl> end
global function sfContext_getSettings(context: *sfContext <const>): sfContextSettings <cimport, nodecl> end
global function sfContext_getActiveContextId(): sfUint64 <cimport, nodecl> end

global sfCircleShape: type <cimport, nodecl, forwarddecl> = @record {}
global sfConvexShape: type <cimport, nodecl, forwarddecl> = @record {}
global sfFont: type <cimport, nodecl, forwarddecl> = @record {}
global sfImage: type <cimport, nodecl, forwarddecl> = @record {}
global sfShader: type <cimport, nodecl, forwarddecl> = @record {}
global sfRectangleShape: type <cimport, nodecl, forwarddecl> = @record {}
global sfRenderTexture: type <cimport, nodecl, forwarddecl> = @record {}
global sfRenderWindow: type <cimport, nodecl, forwarddecl> = @record {}
global sfShape: type <cimport, nodecl, forwarddecl> = @record {}
global sfSprite: type <cimport, nodecl, forwarddecl> = @record {}
global sfText: type <cimport, nodecl, forwarddecl> = @record {}
global sfTexture: type <cimport, nodecl, forwarddecl> = @record {}
global sfTransformable: type <cimport, nodecl, forwarddecl> = @record {}
global sfVertexArray: type <cimport, nodecl, forwarddecl> = @record {}
global sfVertexBuffer: type <cimport, nodecl, forwarddecl> = @record {}
global sfView: type <cimport, nodecl, forwarddecl> = @record {}

global sfBlendFactor: type <cimport, nodecl, using> = @enum(cint) {
  sfBlendFactorZero = 0,
  sfBlendFactorOne,
  sfBlendFactorSrcColor,
  sfBlendFactorOneMinusSrcColor,
  sfBlendFactorDstColor,
  sfBlendFactorOneMinusDstColor,
  sfBlendFactorSrcAlpha,
  sfBlendFactorOneMinusSrcAlpha,
  sfBlendFactorDstAlpha,
  sfBlendFactorOneMinusDstAlpha
}

global sfBlendEquation: type <cimport, nodecl, using> = @enum(cint) {
  sfBlendEquationAdd = 0,
  sfBlendEquationSubtract,
  sfBlendEquationReverseSubtract
}

global sfBlendMode: type <cimport, nodecl> = @record {
  colorSrcFactor: sfBlendFactor,
  colorDstFactor: sfBlendFactor,
  colorEquation: sfBlendEquation,
  alphaSrcFactor: sfBlendFactor,
  alphaDstFactor: sfBlendFactor,
  alphaEquation: sfBlendEquation
}

global sfBlendAlpha: sfBlendMode <cimport, nodecl, const>
global sfBlendAdd: sfBlendMode <cimport, nodecl, const>
global sfBlendMultiply: sfBlendMode <cimport, nodecl, const>
global sfBlendNone: sfBlendMode <cimport, nodecl, const>

global sfFloatRect: type <cimport, nodecl> = @record {
  left: float32,
  top: float32,
  width: float32,
  height: float32
}

global sfIntRect: type <cimport, nodecl> = @record {
  left: cint,
  top: cint,
  width: cint,
  height: cint
}

global sfColor: type <cimport, nodecl> = @record {
  r: sfUint8,
  g: sfUint8,
  b: sfUint8,
  a: sfUint8
}

global sfTransform: type <cimport, nodecl> = @record {
  matrix: [9]float32
}

global sfGlyph: type <cimport, nodecl> = @record {
  advance: float32,
  bounds: sfFloatRect,
  textureRect: sfIntRect
}

global sfVertex: type <cimport, nodecl> = @record {
  position: sfVector2f,
  color: sfColor,
  texCoords: sfVector2f
}

global sfPrimitiveType: type <cimport, nodecl, using> = @enum(cint) {
  sfPoints = 0,
  sfLines,
  sfLineStrip,
  sfTriangles,
  sfTriangleStrip,
  sfTriangleFan,
  sfQuads
}

global sfLinesStrip: cint <cimport, nodecl, const>
global sfTrianglesStrip: cint <cimport, nodecl, const>
global sfTrianglesFan: cint <cimport, nodecl, const>

global sfRenderStates: type <cimport, nodecl> = @record {
  blendMode: sfBlendMode,
  transform: sfTransform,
  texture: *sfTexture,
  shader: *sfShader
}

global sfFontInfo: type <cimport, nodecl> = @record {
  family: cstring
}

global sfBlack: sfColor <cimport, nodecl, const>
global sfWhite: sfColor <cimport, nodecl, const>
global sfRed: sfColor <cimport, nodecl, const>
global sfGreen: sfColor <cimport, nodecl, const>
global sfBlue: sfColor <cimport, nodecl, const>
global sfYellow: sfColor <cimport, nodecl, const>
global sfMagenta: sfColor <cimport, nodecl, const>
global sfCyan: sfColor <cimport, nodecl, const>
global sfTransparent: sfColor <cimport, nodecl, const>

global function sfColor_fromRGB(red: sfUint8, green: sfUint8, blue: sfUint8): sfColor <cimport, nodecl> end
global function sfColor_fromRGBA(red: sfUint8, green: sfUint8, blue: sfUint8, alpha: sfUint8): sfColor <cimport, nodecl> end
global function sfColor_fromInteger(color: sfUint32): sfColor <cimport, nodecl> end
global function sfColor_toInteger(color: sfColor): sfUint32 <cimport, nodecl> end
global function sfColor_add(color1: sfColor, color2: sfColor): sfColor <cimport, nodecl> end
global function sfColor_subtract(color1: sfColor, color2: sfColor): sfColor <cimport, nodecl> end
global function sfColor_modulate(color1: sfColor, color2: sfColor): sfColor <cimport, nodecl> end

global function sfFloatRect_contains(rect: *sfFloatRect <const>, x: float32, y: float32): sfBool <cimport, nodecl> end
global function sfIntRect_contains(rect: *sfIntRect <const>, x: cint, y: cint): sfBool <cimport, nodecl> end
global function sfFloatRect_intersects(rect1: *sfFloatRect <const>, rect2: *sfFloatRect <const>, intersection: *sfFloatRect): sfBool <cimport, nodecl> end
global function sfIntRect_intersects(rect1: *sfIntRect <const>, rect2: *sfIntRect <const>, intersection: *sfIntRect): sfBool <cimport, nodecl> end

global function sfVertexArray_create(): *sfVertexArray <cimport, nodecl> end
global function sfVertexArray_copy(vertexArray: *sfVertexArray <const>): *sfVertexArray <cimport, nodecl> end
global function sfVertexArray_destroy(vertexArray: *sfVertexArray): void <cimport, nodecl> end
global function sfVertexArray_getVertexCount(vertexArray: *sfVertexArray <const>): csize <cimport, nodecl> end
global function sfVertexArray_getVertex(vertexArray: *sfVertexArray, index: csize): *sfVertex <cimport, nodecl> end
global function sfVertexArray_clear(vertexArray: *sfVertexArray): void <cimport, nodecl> end
global function sfVertexArray_resize(vertexArray: *sfVertexArray, vertexCount: csize): void <cimport, nodecl> end
global function sfVertexArray_append(vertexArray: *sfVertexArray, vertex: sfVertex): void <cimport, nodecl> end
global function sfVertexArray_setPrimitiveType(vertexArray: *sfVertexArray, type: sfPrimitiveType): void <cimport, nodecl> end
global function sfVertexArray_getPrimitiveType(vertexArray: *sfVertexArray): sfPrimitiveType <cimport, nodecl> end
global function sfVertexArray_getBounds(vertexArray: *sfVertexArray): sfFloatRect <cimport, nodecl> end

global function sfTransformable_create(): *sfTransformable <cimport, nodecl> end
global function sfTransformable_copy(transformable: *sfTransformable <const>): *sfTransformable <cimport, nodecl> end
global function sfTransformable_destroy(transformable: *sfTransformable): void <cimport, nodecl> end
global function sfTransformable_setPosition(transformable: *sfTransformable, position: sfVector2f): void <cimport, nodecl> end
global function sfTransformable_setRotation(transformable: *sfTransformable, angle: float32): void <cimport, nodecl> end
global function sfTransformable_setScale(transformable: *sfTransformable, scale: sfVector2f): void <cimport, nodecl> end
global function sfTransformable_setOrigin(transformable: *sfTransformable, origin: sfVector2f): void <cimport, nodecl> end
global function sfTransformable_getPosition(transformable: *sfTransformable <const>): sfVector2f <cimport, nodecl> end
global function sfTransformable_getRotation(transformable: *sfTransformable <const>): float32 <cimport, nodecl> end
global function sfTransformable_getScale(transformable: *sfTransformable <const>): sfVector2f <cimport, nodecl> end
global function sfTransformable_getOrigin(transformable: *sfTransformable <const>): sfVector2f <cimport, nodecl> end
global function sfTransformable_move(transformable: *sfTransformable, offset: sfVector2f): void <cimport, nodecl> end
global function sfTransformable_rotate(transformable: *sfTransformable, angle: float32): void <cimport, nodecl> end
global function sfTransformable_scale(transformable: *sfTransformable, factors: sfVector2f): void <cimport, nodecl> end
global function sfTransformable_getTransform(transformable: *sfTransformable <const>): sfTransform <cimport, nodecl> end
global function sfTransformable_getInverseTransform(transformable: *sfTransformable <const>): sfTransform <cimport, nodecl> end

global sfTransform_Identity: sfTransform <cimport, nodecl, const>
global function sfTransform_fromMatrix(a00: float32, a01: float32, a02: float32, a10: float32, a11: float32, a12: float32, a20: float32, a21: float32, a22: float32): sfTransform <cimport, nodecl> end
global function sfTransform_getMatrix(transform: *sfTransform <const>, matrix: *[0]float32): void <cimport, nodecl> end
global function sfTransform_getInverse(transform: *sfTransform <const>): sfTransform <cimport, nodecl> end
global function sfTransform_transformPoint(transform: *sfTransform <const>, point: sfVector2f): sfVector2f <cimport, nodecl> end
global function sfTransform_transformRect(transform: *sfTransform <const>, rectangle: sfFloatRect): sfFloatRect <cimport, nodecl> end
global function sfTransform_combine(transform: *sfTransform, other: *sfTransform <const>): sfFloatRect <cimport, nodecl> end
global function sfTransform_translate(transform: *sfTransform, x: float32, y: float32): void <cimport, nodecl> end
global function sfTransform_rotate(transform: *sfTransform, angle: float32): void <cimport, nodecl> end
global function sfTransform_rotateWithCenter(transform: *sfTransform, angle: float32, centerX: float32, centerY: float32): void <cimport, nodecl> end
global function sfTransform_scale(transform: *sfTransform, scaleX: float32, scaleY: float32): void <cimport, nodecl> end
global function sfTransform_scaleWithCenter(transform: *sfTransform, scaleX: float32, scaleY: float32, centerX: float32, centerY: float32): void <cimport, nodecl> end
global function sfTransform_equal(transform: *sfTransform, right: *sfTransform): sfBool <cimport, nodecl> end

global sfGlslVec2: type <cimport, nodecl> = @sfVector2f
global sfGlslIvec2: type <cimport, nodecl> = @sfVector2i

global sfGlslBvec2: type <cimport, nodecl> = @record {
  x: sfBool,
  y: sfBool
}

global sfGlslVec3: type <cimport, nodecl> = @sfVector3f

global sfGlslIvec3: type <cimport, nodecl> = @record {
  x: cint,
  y: cint,
  z: cint
}

global sfGlslBvec3: type <cimport, nodecl> = @record {
  x: sfBool,
  y: sfBool,
  z: sfBool
}

global sfGlslVec4: type <cimport, nodecl> = @record {
  x: float32,
  y: float32,
  z: float32,
  w: float32
}

global sfGlslIvec4: type <cimport, nodecl> = @record {
  x: cint,
  y: cint,
  z: cint,
  w: cint
}

global sfGlslBvec4: type <cimport, nodecl> = @record {
  x: sfBool,
  y: sfBool,
  z: sfBool,
  w: sfBool
}

global sfGlslMat3: type <cimport, nodecl> = @record {
  array: [9]float32
}

global sfGlslMat4: type <cimport, nodecl> = @record {
  array: [16]float32
}

global function sfView_create(): *sfView <cimport, nodecl> end
global function sfView_createFromRect(rectangle: sfFloatRect): *sfView <cimport, nodecl> end
global function sfView_copy(view: *sfView <const>): *sfView <cimport, nodecl> end
global function sfView_destroy(view: *sfView): void <cimport, nodecl> end
global function sfView_setCenter(view: *sfView, center: sfVector2f): void <cimport, nodecl> end
global function sfView_setSize(view: *sfView, size: sfVector2f): void <cimport, nodecl> end
global function sfView_setRotation(view: *sfView, angle: float32): void <cimport, nodecl> end
global function sfView_setViewport(view: *sfView, viewport: sfFloatRect): void <cimport, nodecl> end
global function sfView_reset(view: *sfView, rectangle: sfFloatRect): void <cimport, nodecl> end
global function sfView_getCenter(view: *sfView <const>): sfVector2f <cimport, nodecl> end
global function sfView_getSize(view: *sfView <const>): sfVector2f <cimport, nodecl> end
global function sfView_getRotation(view: *sfView <const>): float32 <cimport, nodecl> end
global function sfView_getViewport(view: *sfView <const>): sfFloatRect <cimport, nodecl> end
global function sfView_move(view: *sfView, offset: sfVector2f): void <cimport, nodecl> end
global function sfView_rotate(view: *sfView, angle: float32): void <cimport, nodecl> end
global function sfView_zoom(view: *sfView, factor: float32): void <cimport, nodecl> end

global function sfFont_createFromFile(filename: cstring <const>): *sfFont <cimport, nodecl> end
global function sfFont_createFromMemory(data: pointer <const>, sizeInBytes: csize): *sfFont <cimport, nodecl> end
global function sfFont_createFromStream(stream: *sfInputStream): *sfFont <cimport, nodecl> end
global function sfFont_copy(font: *sfFont <const>): *sfFont <cimport, nodecl> end
global function sfFont_destroy(font: *sfFont): void <cimport, nodecl> end
global function sfFont_getGlyph(font: *sfFont <const>, codePoint: sfUint32, characterSize: cuint, bold: sfBool, outlineThickness: float32): sfGlyph <cimport, nodecl> end
global function sfFont_getKerning(font: *sfFont <const>, first: sfUint32, second: sfUint32, characterSize: cuint): float32 <cimport, nodecl> end
global function sfFont_getLineSpacing(font: *sfFont <const>, characterSize: cuint): float32 <cimport, nodecl> end
global function sfFont_getUnderlinePosition(font: *sfFont <const>, characterSize: cuint): float32 <cimport, nodecl> end
global function sfFont_getUnderlineThickness(font: *sfFont <const>, characterSize: cuint): float32 <cimport, nodecl> end
global function sfFont_getTexture(font: *sfFont <const>, characterSize: cuint): *sfTexture <cimport, nodecl> end
global function sfFont_getInfo(font: *sfFont <const>): sfFontInfo <cimport, nodecl> end

global function sfCircleShape_create(): *sfCircleShape <cimport, nodecl> end
global function sfCircleShape_copy(shape: *sfCircleShape <const>): *sfCircleShape <cimport, nodecl> end
global function sfCircleShape_destroy(shape: *sfCircleShape): void <cimport, nodecl> end
global function sfCircleShape_setPosition(shape: *sfCircleShape, position: sfVector2f): void <cimport, nodecl> end
global function sfCircleShape_setRotation(shape: *sfCircleShape, angle: float32): void <cimport, nodecl> end
global function sfCircleShape_setScale(shape: *sfCircleShape, scale: sfVector2f): void <cimport, nodecl> end
global function sfCircleShape_setOrigin(shape: *sfCircleShape, origin: sfVector2f): void <cimport, nodecl> end
global function sfCircleShape_getPosition(shape: *sfCircleShape <const>): sfVector2f <cimport, nodecl> end
global function sfCircleShape_getRotation(shape: *sfCircleShape <const>): float32 <cimport, nodecl> end
global function sfCircleShape_getScale(shape: *sfCircleShape <const>): sfVector2f <cimport, nodecl> end
global function sfCircleShape_getOrigin(shape: *sfCircleShape <const>): sfVector2f <cimport, nodecl> end
global function sfCircleShape_move(shape: *sfCircleShape, offset: sfVector2f): void <cimport, nodecl> end
global function sfCircleShape_rotate(shape: *sfCircleShape, angle: float32): void <cimport, nodecl> end
global function sfCircleShape_scale(shape: *sfCircleShape, factors: sfVector2f): void <cimport, nodecl> end 
global function sfCircleShape_getTransform(shape: *sfCircleShape <const>): sfTransform <cimport, nodecl> end
global function sfCircleShape_getInverseTransform(shape: *sfCircleShape <const>): sfTransform <cimport, nodecl> end
global function sfCircleShape_setTexture(shape: *sfCircleShape, texture: *sfTexture <const>, resetRect: sfBool): void <cimport, nodecl> end
global function sfCircleShape_setTextureRect(shape: *sfCircleShape, rect: sfIntRect): void <cimport, nodecl> end
global function sfCircleShape_setFillColor(shape: *sfCircleShape, color: sfColor): void <cimport, nodecl> end
global function sfCircleShape_setOutlineColor(shape: *sfCircleShape, color: sfColor): void <cimport, nodecl> end
global function sfCircleShape_setOutlineThickness(shape: *sfCircleShape, thickness: float32): void <cimport, nodecl> end
global function sfCircleShape_getTexture(shape: *sfCircleShape <const>): *sfTexture <cimport, nodecl> end
global function sfCircleShape_getTextureRect(shape: *sfCircleShape <const>): sfIntRect <cimport, nodecl> end
global function sfCircleShape_getFillColor(shape: *sfCircleShape <const>): sfColor <cimport, nodecl> end
global function sfCircleShape_getOutlineColor(shape: *sfCircleShape <const>): sfColor <cimport, nodecl> end
global function sfCircleShape_getOutlineThickness(shape: *sfCircleShape <const>): float32 <cimport, nodecl> end
global function sfCircleShape_getPointCount(shape: *sfCircleShape <const>): csize <cimport, nodecl> end
global function sfCircleShape_getPoint(shape: *sfCircleShape <const>, index: csize): sfVector2f <cimport, nodecl> end
global function sfCircleShape_setRadius(shape: *sfCircleShape, radius: float32): void <cimport, nodecl> end
global function sfCircleShape_getRadius(shape: *sfCircleShape <const>): float32 <cimport, nodecl> end
global function sfCircleShape_setPointCount(shape: *sfCircleShape, count: csize): void <cimport, nodecl> end
global function sfCircleShape_getLocalBounds(shape: *sfCircleShape <const>): sfFloatRect <cimport, nodecl> end
global function sfCircleShape_getGlobalBounds(shape: *sfCircleShape <const>): sfFloatRect <cimport, nodecl> end

global function sfConvexShape_create(): *sfConvexShape <cimport, nodecl> end
global function sfConvexShape_copy(shape: *sfConvexShape <const>): *sfConvexShape <cimport, nodecl> end
global function sfConvexShape_destroy(shape: *sfConvexShape): void <cimport, nodecl> end
global function sfConvexShape_setPosition(shape: *sfConvexShape, position: sfVector2f): void <cimport, nodecl> end
global function sfConvexShape_setRotation(shape: *sfConvexShape, angle: float32): void <cimport, nodecl> end
global function sfConvexShape_setScale(shape: *sfConvexShape, scale: sfVector2f): void <cimport, nodecl> end
global function sfConvexShape_setOrigin(shape: *sfConvexShape, origin: sfVector2f): void <cimport, nodecl> end
global function sfConvexShape_getPosition(shape: *sfConvexShape <const>): sfVector2f <cimport, nodecl> end
global function sfConvexShape_getRotation(shape: *sfConvexShape <const>): float32 <cimport, nodecl> end
global function sfConvexShape_getScale(shape: *sfConvexShape <const>): sfVector2f <cimport, nodecl> end
global function sfConvexShape_getOrigin(shape: *sfConvexShape <const>): sfVector2f <cimport, nodecl> end
global function sfConvexShape_move(shape: *sfConvexShape, offset: sfVector2f): void <cimport, nodecl> end
global function sfConvexShape_rotate(shape: *sfConvexShape, angle: float32): void <cimport, nodecl> end
global function sfConvexShape_scale(shape: *sfConvexShape, factors: sfVector2f): void <cimport, nodecl> end
global function sfConvexShape_getTransform(shape: *sfConvexShape <const>): sfTransform <cimport, nodecl> end
global function sfConvexShape_getInverseTransform(shape: *sfConvexShape <const>): sfTransform <cimport, nodecl> end
global function sfConvexShape_setTexture(shape: *sfConvexShape, texture: *sfTexture <const>, resetRect: sfBool): void <cimport, nodecl> end
global function sfConvexShape_setTextureRect(shape: *sfConvexShape, rect: sfIntRect): void <cimport, nodecl> end
global function sfConvexShape_setFillColor(shape: *sfConvexShape, color: sfColor): void <cimport, nodecl> end
global function sfConvexShape_setOutlineColor(shape: *sfConvexShape, color: sfColor): void <cimport, nodecl> end
global function sfConvexShape_setOutlineThickness(shape: *sfConvexShape, thickness: float32): void <cimport, nodecl> end
global function sfConvexShape_getTexture(shape: *sfConvexShape <const>): *sfTexture <cimport, nodecl> end
global function sfConvexShape_getTextureRect(shape: *sfConvexShape <const>): sfIntRect <cimport, nodecl> end
global function sfConvexShape_getFillColor(shape: *sfConvexShape <const>): sfColor <cimport, nodecl> end
global function sfConvexShape_getOutlineColor(shape: *sfConvexShape <const>): sfColor <cimport, nodecl> end
global function sfConvexShape_getOutlineThickness(shape: *sfConvexShape <const>): float32 <cimport, nodecl> end
global function sfConvexShape_getPointCount(shape: *sfConvexShape <const>): csize <cimport, nodecl> end
global function sfConvexShape_getPoint(shape: *sfConvexShape <const>, index: csize): sfVector2f <cimport, nodecl> end
global function sfConvexShape_setRadius(shape: *sfConvexShape, radius: float32): void <cimport, nodecl> end
global function sfConvexShape_getRadius(shape: *sfConvexShape <const>): float32 <cimport, nodecl> end
global function sfConvexShape_setPointCount(shape: *sfConvexShape, count: csize): void <cimport, nodecl> end
global function sfConvexShape_getLocalBounds(shape: *sfConvexShape <const>): sfFloatRect <cimport, nodecl> end
global function sfConvexShape_getGlobalBounds(shape: *sfConvexShape <const>): sfFloatRect <cimport, nodecl> end

global function sfImage_create(width: cuint, height: cuint): *sfImage <cimport, nodecl> end
global function sfImage_createFromColor(width: cuint, height: cuint, color: sfColor): *sfImage <cimport, nodecl> end
global function sfImage_createFromPixels(width: cuint, height: cuint, pixels: *[0]sfUint8): *sfImage <cimport, nodecl> end
global function sfImage_createFromFile(filename: cstring <const>): *sfImage <cimport, nodecl> end
global function sfImage_createFromMemory(data: pointer <const>, size: csize): *sfImage <cimport, nodecl> end
global function sfImage_createFromStream(stream: *sfInputStream): *sfImage <cimport, nodecl> end
global function sfImage_copy(image: *sfImage <const>): *sfImage <cimport, nodecl> end
global function sfImage_destroy(image: *sfImage): void <cimport, nodecl> end
global function sfImage_saveToFile(image: *sfImage <const>, filename: cstring <const>): sfBool <cimport, nodecl> end
global function sfImage_getSize(image: *sfImage <const>): sfVector2u <cimport, nodecl> end
global function sfImage_createMaskFromColor(image: *sfImage, color: sfColor, alpha: sfUint8): void <cimport, nodecl> end
global function sfImage_copyImage(image: *sfImage, source: *sfImage <const>, destX: cuint, destY: cuint, sourceRect: sfIntRect, applyAlpha: sfBool): void <cimport, nodecl> end
global function sfImage_setPixel(image: *sfImage, x: cuint, y: cuint, color: sfColor): void <cimport, nodecl> end
global function sfImage_getPixel(image: *sfImage <const>, x: cuint, y: cuint): sfColor <cimport, nodecl> end
global function sfImage_getPixelsPtr(image: *sfImage <const>): *[0]sfUint8 <cimport, nodecl> end
global function sfImage_flipHorizontally(image: *sfImage): void <cimport, nodecl> end
global function sfImage_flipVertically(image: *sfImage): void <cimport, nodecl> end

global function sfRectangleShape_create(): *sfRectangleShape <cimport, nodecl> end
global function sfRectangleShape_copy(shape: *sfRectangleShape <const>): *sfRectangleShape <cimport, nodecl> end
global function sfRectangleShape_destroy(shape: *sfRectangleShape): void <cimport, nodecl> end
global function sfRectangleShape_setPosition(shape: *sfRectangleShape, position: sfVector2f): void <cimport, nodecl> end
global function sfRectangleShape_setRotation(shape: *sfRectangleShape, angle: float32): void <cimport, nodecl> end
global function sfRectangleShape_setScale(shape: *sfRectangleShape, scale: sfVector2f): void <cimport, nodecl> end
global function sfRectangleShape_setOrigin(shape: *sfRectangleShape, origin: sfVector2f): void <cimport, nodecl> end
global function sfRectangleShape_getPosition(shape: *sfRectangleShape <const>): sfVector2f <cimport, nodecl> end
global function sfRectangleShape_getRotation(shape: *sfRectangleShape <const>): float32 <cimport, nodecl> end
global function sfRectangleShape_getScale(shape: *sfRectangleShape <const>): sfVector2f <cimport, nodecl> end
global function sfRectangleShape_getOrigin(shape: *sfRectangleShape <const>): sfVector2f <cimport, nodecl> end
global function sfRectangleShape_move(shape: *sfRectangleShape, offset: sfVector2f): void <cimport, nodecl> end
global function sfRectangleShape_rotate(shape: *sfRectangleShape, angle: float32): void <cimport, nodecl> end
global function sfRectangleShape_scale(shape: *sfRectangleShape, factors: sfVector2f): void <cimport, nodecl> end
global function sfRectangleShape_getTransform(shape: *sfRectangleShape <const>): sfTransform <cimport, nodecl> end
global function sfRectangleShape_getInverseTransform(shape: *sfRectangleShape <const>): sfTransform <cimport, nodecl> end
global function sfRectangleShape_setTexture(shape: *sfRectangleShape, texture: *sfTexture <const>, resetRect: sfBool): void <cimport, nodecl> end
global function sfRectangleShape_setTextureRect(shape: *sfRectangleShape, rect: sfIntRect): void <cimport, nodecl> end
global function sfRectangleShape_setFillColor(shape: *sfRectangleShape, color: sfColor): void <cimport, nodecl> end
global function sfRectangleShape_setOutlineColor(shape: *sfRectangleShape, color: sfColor): void <cimport, nodecl> end
global function sfRectangleShape_setOutlineThickness(shape: *sfRectangleShape, thickness: float32): void <cimport, nodecl> end
global function sfRectangleShape_getTexture(shape: *sfRectangleShape <const>): *sfTexture <cimport, nodecl> end
global function sfRectangleShape_getTextureRect(shape: *sfRectangleShape <const>): sfIntRect <cimport, nodecl> end
global function sfRectangleShape_getFillColor(shape: *sfRectangleShape <const>): sfColor <cimport, nodecl> end
global function sfRectangleShape_getOutlineColor(shape: *sfRectangleShape <const>): sfColor <cimport, nodecl> end
global function sfRectangleShape_getOutlineThickness(shape: *sfRectangleShape <const>): float32 <cimport, nodecl> end
global function sfRectangleShape_getPointCount(shape: *sfRectangleShape <const>): csize <cimport, nodecl> end
global function sfRectangleShape_getPoint(shape: *sfRectangleShape <const>, index: csize): sfVector2f <cimport, nodecl> end
global function sfRectangleShape_setSize(shape: *sfRectangleShape, size: float32): void <cimport, nodecl> end
global function sfRectangleShape_getSize(shape: *sfRectangleShape <const>): sfVector2f <cimport, nodecl> end
global function sfRectangleShape_setPointCount(shape: *sfRectangleShape, count: csize): void <cimport, nodecl> end
global function sfRectangleShape_getLocalBounds(shape: *sfRectangleShape <const>): sfFloatRect <cimport, nodecl> end
global function sfRectangleShape_getGlobalBounds(shape: *sfRectangleShape <const>): sfFloatRect <cimport, nodecl> end

global function sfRenderTexture_create(width: cuint, height: cuint, depthBuffer: sfBool): *sfRenderTexture <cimport, nodecl> end
global function sfRenderTexture_createWithSettings(width: cuint, height: cuint, settings: *sfContextSettings <const>): *sfRenderTexture <cimport, nodecl> end
global function sfRenderTexture_destroy(renderTexture: *sfRenderTexture): void <cimport, nodecl> end
global function sfRenderTexture_getSize(renderTexture: *sfRenderTexture <const>): sfVector2u <cimport, nodecl> end
global function sfRenderTexture_setActive(renderTexture: *sfRenderTexture, active: sfBool): sfVector2u <cimport, nodecl> end
global function sfRenderTexture_display(renderTexture: *sfRenderTexture): void <cimport, nodecl> end
global function sfRenderTexture_clear(renderTexture: *sfRenderTexture, color: sfColor): void <cimport, nodecl> end
global function sfRenderTexture_setView(renderTexture: *sfRenderTexture, view: *sfView <const>): void <cimport, nodecl> end
global function sfRenderTexture_getView(renderTexture: *sfRenderTexture <const>): *sfView <cimport, nodecl> end
global function sfRenderTexture_getDefaultView(renderTexture: *sfRenderTexture <const>): *sfView <cimport, nodecl> end
global function sfRenderTexture_getViewport(renderTexture: *sfRenderTexture <const>, view: *sfView <const>): sfIntRect <cimport, nodecl> end
global function sfRenderTexture_mapPixelToCoords(renderTexture: *sfRenderTexture <const>, point: sfVector2i, view: *sfView <const>): sfVector2f <cimport, nodecl> end
global function sfRenderTexture_mapCoordsToPixel(renderTexture: *sfRenderTexture <const>, point: sfVector2f, view: *sfView <const>): sfVector2i <cimport, nodecl> end
global function sfRenderTexture_drawSprite(renderTexture: *sfRenderTexture, object: *sfSprite <const>, states: *sfRenderStates <const>): void <cimport, nodecl> end
global function sfRenderTexture_drawText(renderTexture: *sfRenderTexture, object: *sfText <const>, states: *sfRenderStates <const>): void <cimport, nodecl> end
global function sfRenderTexture_drawShape(renderTexture: *sfRenderTexture, object: *sfShape <const>, states: *sfRenderStates <const>): void <cimport, nodecl> end
global function sfRenderTexture_drawCircleShape(renderTexture: *sfRenderTexture, object: *sfCircleShape <const>, states: *sfRenderStates <const>): void <cimport, nodecl> end
global function sfRenderTexture_drawConvexShape(renderTexture: *sfRenderTexture, object: *sfConvexShape <const>, states: *sfRenderStates <const>): void <cimport, nodecl> end
global function sfRenderTexture_drawRectangleShape(renderTexture: *sfRenderTexture, object: *sfRectangleShape <const>, states: *sfRenderStates <const>): void <cimport, nodecl> end
global function sfRenderTexture_drawVertexArray(renderTexture: *sfRenderTexture, object: *sfVertexArray <const>, states: *sfRenderStates <const>): void <cimport, nodecl> end
global function sfRenderTexture_drawVertexBuffer(renderTexture: *sfRenderTexture, object: *sfVertexBuffer <const>, states: *sfRenderStates <const>): void <cimport, nodecl> end
global function sfRenderTexture_drawPrimitives(renderTexture: *sfRenderTexture, vertices: *[0]sfVertex <const>, vertexCount: csize, type: sfPrimitiveType, states: *sfRenderStates <const>): void <cimport, nodecl> end
global function sfRenderTexture_pushGLStates(renderTexture: *sfRenderTexture): void <cimport, nodecl> end
global function sfRenderTexture_popGLStates(renderTexture: *sfRenderTexture): void <cimport, nodecl> end
global function sfRenderTexture_resetGLStates(renderTexture: *sfRenderTexture): void <cimport, nodecl> end
global function sfRenderTexture_getTexture(renderTexture: *sfRenderTexture <const>): *sfTexture <cimport, nodecl> end
global function sfRenderTexture_getMaximumAntialiasingLevel(): cuint <cimport, nodecl> end
global function sfRenderTexture_setSmooth(renderTexture: *sfRenderTexture, smooth: sfBool): void <cimport, nodecl> end
global function sfRenderTexture_isSmooth(renderTexture: *sfRenderTexture <const>): sfBool <cimport, nodecl> end
global function sfRenderTexture_setRepeated(renderTexture: *sfRenderTexture, repeated: sfBool): void <cimport, nodecl> end
global function sfRenderTexture_isRepeated(renderTexture: *sfRenderTexture <const>): sfBool <cimport, nodecl> end
global function sfRenderTexture_generateMipmap(renderTexture: *sfRenderTexture): sfBool <cimport, nodecl> end

global function sfRenderWindow_create(mode: sfVideoMode, title: cstring <const>, style: sfUint32, settings: *sfContextSettings <const>): *sfRenderWindow <cimport, nodecl> end
global function sfRenderWindow_createUnicode(mode: sfVideoMode, title: *sfUint32, style: sfUint32, settings: *sfContextSettings <const>): *sfRenderWindow <cimport, nodecl> end
global function sfRenderWindow_createFromHandle(handle: sfWindowHandle, settings: *sfContextSettings <const>): *sfRenderWindow <cimport, nodecl> end
global function sfRenderWindow_destroy(renderWindow: *sfRenderWindow): void <cimport, nodecl> end
global function sfRenderWindow_close(renderWindow: *sfRenderWindow): void <cimport, nodecl> end
global function sfRenderWindow_isOpen(renderWindow: *sfRenderWindow <const>): sfBool <cimport, nodecl> end
global function sfRenderWindow_getSettings(renderWindow: *sfRenderWindow <const>): sfContextSettings <cimport, nodecl> end
global function sfRenderWindow_pollEvent(renderWindow: *sfRenderWindow, event: *sfEvent): sfContextSettings <cimport, nodecl> end
global function sfRenderWindow_waitEvent(renderWindow: *sfRenderWindow, event: *sfEvent): sfContextSettings <cimport, nodecl> end
global function sfRenderWindow_getPosition(renderWindow: *sfRenderWindow <const>): sfVector2i <cimport, nodecl> end
global function sfRenderWindow_setPosition(renderWindow: *sfRenderWindow, position: sfVector2i): void <cimport, nodecl> end
global function sfRenderWindow_getSize(renderWindow: *sfRenderWindow <const>): sfVector2u <cimport, nodecl> end
global function sfRenderWindow_setSize(renderWindow: *sfRenderWindow, size: sfVector2u): void <cimport, nodecl> end
global function sfRenderWindow_setSize(renderWindow: *sfRenderWindow, title: cstring <const>): void <cimport, nodecl> end
global function sfRenderWindow_setUnicodeTitle(renderWindow: *sfRenderWindow, title: *sfUint32 <const>): void <cimport, nodecl> end
global function sfRenderWindow_setIcon(renderWindow: *sfRenderWindow, width: cuint, height: cuint, pixels: *[0]sfUint8 <const>): void <cimport, nodecl> end
global function sfRenderWindow_setVisible(renderWindow: *sfRenderWindow, visible: sfBool): void <cimport, nodecl> end
global function sfRenderWindow_setVerticalSyncEnabled(renderWindow: *sfRenderWindow, enabled: sfBool): void <cimport, nodecl> end
global function sfRenderWindow_setMouseCursorVisible(renderWindow: *sfRenderWindow, show: sfBool): void <cimport, nodecl> end
global function sfRenderWindow_setMouseCursorGrabbed(renderWindow: *sfRenderWindow, grabbed: sfBool): void <cimport, nodecl> end
global function sfRenderWindow_setMouseCursor(renderWindow: *sfRenderWindow, cursor: *sfCursor <const>): void <cimport, nodecl> end
global function sfRenderWindow_setKeyRepeatEnabled(renderWindow: *sfRenderWindow, enabled: sfBool): void <cimport, nodecl> end
global function sfRenderWindow_setFramerateLimit(renderWindow: *sfRenderWindow, limit: cuint): void <cimport, nodecl> end
global function sfRenderWindow_setJoystickThreshold(renderWindow: *sfRenderWindow, threshold: float32): void <cimport, nodecl> end
global function sfRenderWindow_setActive(renderWindow: *sfRenderWindow, active: sfBool): void <cimport, nodecl> end
global function sfRenderWindow_requestFocus(renderWindow: *sfRenderWindow): void <cimport, nodecl> end
global function sfRenderWindow_hasFocus(renderWindow: *sfRenderWindow <const>): sfBool <cimport, nodecl> end
global function sfRenderWindow_display(renderWindow: *sfRenderWindow): void <cimport, nodecl> end
global function sfRenderWindow_getSystemHandle(renderWindow: *sfRenderWindow <const>): sfWindowHandle <cimport, nodecl> end
global function sfRenderWindow_clear(renderWindow: *sfRenderWindow, color: sfColor): void <cimport, nodecl> end
global function sfRenderWindow_setView(renderWindow: *sfRenderWindow, view: *sfView): void <cimport, nodecl> end
global function sfRenderWindow_getView(renderWindow: *sfRenderWindow <const>): *sfView <cimport, nodecl> end
global function sfRenderWindow_getDefaultView(renderWindow: *sfRenderWindow <const>): *sfView <cimport, nodecl> end
global function sfRenderWindow_getViewport(renderWindow: *sfRenderWindow <const>, view: *sfView <const>): sfIntRect <cimport, nodecl> end
global function sfRenderWindow_mapPixelToCoords(renderWindow: *sfRenderWindow <const>, point: sfVector2i, view: *sfView <const>): sfVector2f <cimport, nodecl> end
global function sfRenderWindow_mapCoordsToPixel(renderWindow: *sfRenderWindow <const>, point: sfVector2f, view: *sfView <const>): sfVector2i <cimport, nodecl> end
global function sfRenderWindow_drawSprite(renderWindow: *sfRenderWindow, object: *sfSprite <const>, states: *sfRenderStates <const>): void <cimport, nodecl> end
global function sfRenderWindow_drawText(renderWindow: *sfRenderWindow, object: *sfText <const>, states: *sfRenderStates <const>): void <cimport, nodecl> end
global function sfRenderWindow_drawShape(renderWindow: *sfRenderWindow, object: *sfShape <const>, states: *sfRenderStates <const>): void <cimport, nodecl> end
global function sfRenderWindow_drawCircleShape(renderWindow: *sfRenderWindow, object: *sfCircleShape <const>, states: *sfRenderStates <const>): void <cimport, nodecl> end
global function sfRenderWindow_drawConvexShape(renderWindow: *sfRenderWindow, object: *sfConvexShape <const>, states: *sfRenderStates <const>): void <cimport, nodecl> end
global function sfRenderWindow_drawRectangleShape(renderWindow: *sfRenderWindow, object: *sfRectangleShape <const>, states: *sfRenderStates <const>): void <cimport, nodecl> end
global function sfRenderWindow_drawVertexArray(renderWindow: *sfRenderWindow, object: *sfVertexArray <const>, states: *sfRenderStates <const>): void <cimport, nodecl> end
global function sfRenderWindow_drawVertexBuffer(renderWindow: *sfRenderWindow, object: *sfVertexBuffer <const>, states: *sfRenderStates <const>): void <cimport, nodecl> end
global function sfRenderWindow_drawPrimitives(renderWindow: *sfRenderWindow, vertices: *sfVertex <const>, vertexCount: csize, type: sfPrimitiveType, states: *sfRenderStates <const>): void <cimport, nodecl> end
global function sfRenderWindow_pushGLStates(renderWindow: *sfRenderWindow): void <cimport, nodecl> end
global function sfRenderWindow_popGLStates(renderWindow: *sfRenderWindow): void <cimport, nodecl> end
global function sfRenderWindow_resetGLStates(renderWindow: *sfRenderWindow): void <cimport, nodecl> end
global function sfRenderWindow_capture(renderWindow: *sfRenderWindow <const>): *sfImage <cimport, nodecl> end
global function sfMouse_getPositionRenderWindow(relativeTo: *sfRenderWindow <const>): sfVector2i <cimport, nodecl> end
global function sfMouse_setPositionRenderWindow(position: sfVector2i, relativeTo: *sfRenderWindow <const>): void <cimport, nodecl> end
global function sfTouch_getPositionRenderWindow(finger: cuint, relativeTo: *sfRenderWindow <const>): sfVector2i <cimport, nodecl> end

global function sfShader_createFromFile(vertexShaderFilename: cstring <const>, geometryShaderFilename: cstring <const>, fragmentShaderFilename: cstring <const>): *sfShader <cimport, nodecl> end
global function sfShader_createFromMemory(vertexShader: cstring <const>, geometryShader: cstring <const>, fragmentShader: cstring <const>): *sfShader <cimport, nodecl> end
global function sfShader_createFromStream(vertexShader: *sfInputStream, geometryShader: *sfInputStream, fragmentShader: *sfInputStream): *sfShader <cimport, nodecl> end
global function sfShader_destroy(shader: *sfShader): void <cimport, nodecl> end
global function sfShader_setFloatUniform(shader: *sfShader, name: cstring <const>, x: float32): void <cimport, nodecl> end
global function sfShader_setVec3Uniform(shader: *sfShader, name: cstring <const>, vector: sfGlslVec2): void <cimport, nodecl> end
global function sfShader_setVec3Uniform(shader: *sfShader, name: cstring <const>, vector: sfGlslVec3): void <cimport, nodecl> end
global function sfShader_setVec4Uniform(shader: *sfShader, name: cstring <const>, vector: sfGlslVec4): void <cimport, nodecl> end
global function sfShader_setColorUniform(shader: *sfShader, name: cstring <const>, color: sfColor): void <cimport, nodecl> end
global function sfShader_setIntUniform(shader: *sfShader, name: cstring <const>, x: cint): void <cimport, nodecl> end
global function sfShader_setIvec2Uniform(shader: *sfShader, name: cstring <const>, vector: sfGlslIvec2): void <cimport, nodecl> end
global function sfShader_setIvec3Uniform(shader: *sfShader, name: cstring <const>, vector: sfGlslIvec3): void <cimport, nodecl> end
global function sfShader_setIvec4Uniform(shader: *sfShader, name: cstring <const>, vector: sfGlslIvec4): void <cimport, nodecl> end
global function sfShader_setIntColorUniform(shader: *sfShader, name: cstring <const>, color: sfColor): void <cimport, nodecl> end
global function sfShader_setBoolUniform(shader: *sfShader, name: cstring <const>, x: sfBool): void <cimport, nodecl> end
global function sfShader_setBvec2Uniform(shader: *sfShader, name: cstring <const>, vector: sfGlslBvec2): void <cimport, nodecl> end
global function sfShader_setBvec3Uniform(shader: *sfShader, name: cstring <const>, vector: sfGlslBvec3): void <cimport, nodecl> end
global function sfShader_setBvec4Uniform(shader: *sfShader, name: cstring <const>, vector: sfGlslBvec4): void <cimport, nodecl> end
global function sfShader_setMat3Uniform(shader: *sfShader, name: cstring <const>, matrix: *sfGlslMat3 <const>): void <cimport, nodecl> end
global function sfShader_setMat4Uniform(shader: *sfShader, name: cstring <const>, matrix: *sfGlslMat4 <const>): void <cimport, nodecl> end
global function sfShader_setTextureUniform(shader: *sfShader, name: cstring <const>, texture: *sfTexture <const>): void <cimport, nodecl> end
global function sfShader_setCurrentTextureUniform(shader: *sfShader, name: cstring <const>): void <cimport, nodecl> end
global function sfShader_setFloatUniformArray(shader: *sfShader, name: cstring <const>, scalarArray: *[0]float32, length: csize): void <cimport, nodecl> end
global function sfShader_setVec2UniformArray(shader: *sfShader, name: cstring <const>, vectorArray: *[0]sfGlslVec2, length: csize): void <cimport, nodecl> end
global function sfShader_setVec3UniformArray(shader: *sfShader, name: cstring <const>, vectorArray: *[0]sfGlslVec3, length: csize): void <cimport, nodecl> end
global function sfShader_setVec4UniformArray(shader: *sfShader, name: cstring <const>, vectorArray: *[0]sfGlslVec4, length: csize): void <cimport, nodecl> end
global function sfShader_setMat3UniformArray(shader: *sfShader, name: cstring <const>, matrixArray: *[0]sfGlslMat3, length: csize): void <cimport, nodecl> end
global function sfShader_setMat4UniformArray(shader: *sfShader, name: cstring <const>, matrixArray: *[0]sfGlslMat4, length: csize): void <cimport, nodecl> end
global function sfShader_setFloatParameter(shader: *sfShader, name: cstring <const>, x: float32): void <cimport, nodecl> end
global function sfShader_setFloat2Parameter(shader: *sfShader, name: cstring <const>, x: float32, y: float32): void <cimport, nodecl> end
global function sfShader_setFloat3Parameter(shader: *sfShader, name: cstring <const>, x: float32, y: float32, z: float32): void <cimport, nodecl> end
global function sfShader_setFloat4Parameter(shader: *sfShader, name: cstring <const>, x: float32, y: float32, z: float32, w: float32): void <cimport, nodecl> end
global function sfShader_setVector2Parameter(shader: *sfShader, name: cstring <const>, vector: sfVector2f): void <cimport, nodecl> end
global function sfShader_setVector3Parameter(shader: *sfShader, name: cstring <const>, vector: sfVector3f): void <cimport, nodecl> end
global function sfShader_setColorParameter(shader: *sfShader, name: cstring <const>, color: sfColor): void <cimport, nodecl> end
global function sfShader_setTransformParameter(shader: *sfShader, name: cstring <const>, transform: sfTransform): void <cimport, nodecl> end
global function sfShader_setTextureParameter(shader: *sfShader, name: cstring <const>, texture: *sfTexture <const>): void <cimport, nodecl> end
global function sfShader_setCurrentTextureParameter(shader: *sfShader, name: cstring <const>): void <cimport, nodecl> end
global function sfShader_getNativeHandle(shader: *sfShader <const>): cuint <cimport, nodecl> end
global function sfShader_bind(shader: *sfShader <const>): void <cimport, nodecl> end
global function sfShader_isAvailable(): sfBool <cimport, nodecl> end
global function sfShader_isGeometryAvailable(): sfBool <cimport, nodecl> end

global sfShapeGetPointCountCallback: type <cimport, nodecl> = @function(pointer): csize
global sfShapeGetPointCallback: type <cimport, nodecl> = @function(csize, pointer): sfVector2f
global function sfShape_create(getPointCount: sfShapeGetPointCountCallback, getPoint: sfShapeGetPointCallback, userData: pointer): *sfShape <cimport, nodecl> end
global function sfShape_destroy(shape: *sfShape): void <cimport, nodecl> end
global function sfShape_setPosition(shape: *sfShape, position: sfVector2f): void <cimport, nodecl> end
global function sfShape_setRotation(shape: *sfShape, angle: float32): void <cimport, nodecl> end
global function sfShape_setScale(shape: *sfShape, scale: sfVector2f): void <cimport, nodecl> end
global function sfShape_setOrigin(shape: *sfShape, origin: sfVector2f): void <cimport, nodecl> end
global function sfShape_getPosition(shape: *sfShape <const>): sfVector2f <cimport, nodecl> end
global function sfShape_getRotation(shape: *sfShape <const>): float32 <cimport, nodecl> end
global function sfShape_getScale(shape: *sfShape <const>): sfVector2f <cimport, nodecl> end
global function sfShape_getOrigin(shape: *sfShape <const>): sfVector2f <cimport, nodecl> end
global function sfShape_move(shape: *sfShape, offset: sfVector2f): void <cimport, nodecl> end
global function sfShape_rotate(shape: *sfShape, angle: float32): void <cimport, nodecl> end
global function sfShape_scale(shape: *sfShape, factors: sfVector2f): void <cimport, nodecl> end
global function sfShape_getTransform(shape: *sfShape <const>): sfTransform <cimport, nodecl> end
global function sfShape_getInverseTransform(shape: *sfShape <const>): sfTransform <cimport, nodecl> end
global function sfShape_setTexture(shape: *sfShape, texture: *sfTexture <const>, resetRect: sfBool): void <cimport, nodecl> end
global function sfShape_setTextureRect(shape: *sfShape, rect: sfIntRect): void <cimport, nodecl> end
global function sfShape_setFillColor(shape: *sfShape, color: sfColor): void <cimport, nodecl> end
global function sfShape_setOutlineColor(shape: *sfShape, color: sfColor): void <cimport, nodecl> end
global function sfShape_setOutlineThickness(shape: *sfShape, thickness: float32): void <cimport, nodecl> end
global function sfShape_getTexture(shape: *sfShape <const>): *sfTexture <cimport, nodecl> end
global function sfShape_getTextureRect(shape: *sfShape <const>): sfIntRect <cimport, nodecl> end
global function sfShape_getFillColor(shape: *sfShape <const>): sfColor <cimport, nodecl> end
global function sfShape_getOutlineColor(shape: *sfShape <const>): sfColor <cimport, nodecl> end
global function sfShape_getOutlineThickness(shape: *sfShape <const>): float32 <cimport, nodecl> end
global function sfShape_getPointCount(shape: *sfShape <const>): csize <cimport, nodecl> end
global function sfShape_getPoint(shape: *sfShape <const>, index: csize): sfVector2f <cimport, nodecl> end
global function sfShape_setSize(shape: *sfShape, size: float32): void <cimport, nodecl> end
global function sfShape_getSize(shape: *sfShape <const>): sfVector2f <cimport, nodecl> end
global function sfShape_setPointCount(shape: *sfShape, count: csize): void <cimport, nodecl> end
global function sfShape_getLocalBounds(shape: *sfShape <const>): sfFloatRect <cimport, nodecl> end
global function sfShape_getGlobalBounds(shape: *sfShape <const>): sfFloatRect <cimport, nodecl> end
global function sfShape_update(shape: *sfShape): void <cimport, nodecl> end

global function sfSprite_create(): *sfSprite <cimport, nodecl> end
global function sfSprite_copy(sprite: *sfSprite <const>): *sfSprite <cimport, nodecl> end
global function sfSprite_destroy(sprite: *sfSprite): void <cimport, nodecl> end
global function sfSprite_setPosition(sprite: *sfSprite, position: sfVector2f): void <cimport, nodecl> end
global function sfSprite_setRotation(sprite: *sfSprite, angle: float32): void <cimport, nodecl> end
global function sfSprite_setScale(sprite: *sfSprite, scale: sfVector2f): void <cimport, nodecl> end
global function sfSprite_setOrigin(sprite: *sfSprite, origin: sfVector2f): void <cimport, nodecl> end
global function sfSprite_getPosition(sprite: *sfSprite <const>): sfVector2f <cimport, nodecl> end
global function sfSprite_getRotation(sprite: *sfSprite <const>): float32 <cimport, nodecl> end
global function sfSprite_getScale(sprite: *sfSprite <const>): sfVector2f <cimport, nodecl> end
global function sfSprite_getOrigin(sprite: *sfSprite <const>): sfVector2f <cimport, nodecl> end
global function sfSprite_move(sprite: *sfSprite, offset: sfVector2f): void <cimport, nodecl> end
global function sfSprite_rotate(sprite: *sfSprite, angle: float32): void <cimport, nodecl> end
global function sfSprite_scale(sprite: *sfSprite, factors: sfVector2f): void <cimport, nodecl> end
global function sfSprite_getTransform(sprite: *sfSprite <const>): sfTransform <cimport, nodecl> end
global function sfSprite_getInverseTransform(sprite: *sfSprite <const>): sfTransform <cimport, nodecl> end
global function sfSprite_setTexture(sprite: *sfSprite, texture: *sfTexture, resetRect: sfBool): void <cimport, nodecl> end
global function sfSprite_setTextureRect(sprite: *sfSprite, rectangle: sfIntRect): void <cimport, nodecl> end
global function sfSprite_setColor(sprite: *sfSprite, color: sfColor): void <cimport, nodecl> end
global function sfSprite_getTexture(sprite: *sfSprite <const>): *sfTexture <cimport, nodecl> end
global function sfSprite_getTextureRect(sprite: *sfSprite <const>): sfIntRect <cimport, nodecl> end
global function sfSprite_getColor(sprite: *sfSprite <const>): sfColor <cimport, nodecl> end
global function sfSprite_getLocalBounds(sprite: *sfSprite <const>): sfFloatRect <cimport, nodecl> end
global function sfSprite_getGlobalBounds(sprite: *sfSprite <const>): sfFloatRect <cimport, nodecl> end

global sfTextStyle: type <cimport, nodecl, using> = @enum(cint) {
  sfTextRegular       = 0,
  sfTextBold          = 1 << 0,
  sfTextItalic        = 1 << 1,
  sfTextUnderlined    = 1 << 2,
  sfTextStrikeThrough = 1 << 3
}

global function sfText_create(): *sfText <cimport, nodecl> end
global function sfText_copy(text: *sfText <const>): *sfText <cimport, nodecl> end
global function sfText_destroy(text: *sfText): void <cimport, nodecl> end
global function sfText_setPosition(text: *sfText, position: sfVector2f): void <cimport, nodecl> end
global function sfText_setRotation(text: *sfText, angle: float32): void <cimport, nodecl> end
global function sfText_setScale(text: *sfText, scale: sfVector2f): void <cimport, nodecl> end
global function sfText_setOrigin(text: *sfText, origin: sfVector2f): void <cimport, nodecl> end
global function sfText_getPosition(text: *sfText <const>): sfVector2f <cimport, nodecl> end
global function sfText_getRotation(text: *sfText <const>): float32 <cimport, nodecl> end
global function sfText_getScale(text: *sfText <const>): sfVector2f <cimport, nodecl> end
global function sfText_getOrigin(text: *sfText <const>): sfVector2f <cimport, nodecl> end
global function sfText_move(text: *sfText, offset: sfVector2f): void <cimport, nodecl> end
global function sfText_rotate(text: *sfText, angle: float32): void <cimport, nodecl> end
global function sfText_scale(text: *sfText, factors: sfVector2f): void <cimport, nodecl> end
global function sfText_getTransform(text: *sfText <const>): sfTransform <cimport, nodecl> end
global function sfText_getInverseTransform(text: *sfText <const>): sfTransform <cimport, nodecl> end
global function sfText_setString(text: *sfText, string: cstring <const>): void <cimport, nodecl> end
global function sfText_setUnicodeString(text: *sfText, string: *sfUint32 <const>): void <cimport, nodecl> end
global function sfText_setFont(text: *sfText, font: *sfFont <const>): void <cimport, nodecl> end
global function sfText_setCharacterSize(text: *sfText, size: cuint): void <cimport, nodecl> end
global function sfText_setLineSpacing(text: *sfText, spacingFactor: float32): void <cimport, nodecl> end
global function sfText_setLetterSpacing(text: *sfText, spacingFactor: float32): void <cimport, nodecl> end
global function sfText_setStyle(text: *sfText, style: sfUint32): void <cimport, nodecl> end
global function sfText_setColor(text: *sfText, color: sfColor): void <cimport, nodecl> end
global function sfText_setFillColor(text: *sfText, color: sfColor): void <cimport, nodecl> end
global function sfText_setOutlineColor(text: *sfText, color: sfColor): void <cimport, nodecl> end
global function sfText_setOutlineThickness(text: *sfText, thickness: float32): void <cimport, nodecl> end
global function sfText_getString(text: *sfText <const>): cstring <cimport, nodecl> end
global function sfText_getUnicodeString(text: *sfText <const>): *sfUint32 <cimport, nodecl> end
global function sfText_getFont(text: *sfText <const>): *sfFont <cimport, nodecl> end
global function sfText_getCharacterSize(text: *sfText <const>): cuint <cimport, nodecl> end
global function sfText_getLineSpacing(text: *sfText <const>): float32 <cimport, nodecl> end
global function sfText_getLetterSpacing(text: *sfText <const>): float32 <cimport, nodecl> end
global function sfText_getStyle(text: *sfText <const>): sfUint32 <cimport, nodecl> end
global function sfText_getColor(text: *sfText <const>): sfColor <cimport, nodecl> end
global function sfText_getFillColor(text: *sfText <const>): sfColor <cimport, nodecl> end
global function sfText_getOutlineColor(text: *sfText <const>): sfColor <cimport, nodecl> end
global function sfText_getOutlineThickness(text: *sfText <const>): float32 <cimport, nodecl> end
global function sfText_findCharacterPos(text: cstring <const>, index: csize): sfVector2f <cimport, nodecl> end
global function sfText_getLocalBounds(text: cstring <const>): sfFloatRect <cimport, nodecl> end
global function sfText_getGlobalBounds(text: cstring <const>): sfFloatRect <cimport, nodecl> end

global function sfTexture_create(width: cuint, height: cuint): *sfTexture <cimport, nodecl> end
global function sfTexture_createFromFile(filename: cstring <const>, area: *sfIntRect <const>): *sfTexture <cimport, nodecl> end
global function sfTexture_createFromMemory(data: pointer <const>, sizeInBytes: csize, area: *sfIntRect <const>): *sfTexture <cimport, nodecl> end
global function sfTexture_createFromStream(stream: *sfInputStream, area: *sfIntRect <const>): *sfTexture <cimport, nodecl> end
global function sfTexture_createFromImage(image: *sfImage <const>, area: *sfIntRect <const>): *sfTexture <cimport, nodecl> end
global function sfTexture_copy(texture: *sfTexture <const>): *sfTexture <cimport, nodecl> end
global function sfTexture_destroy(texture: *sfTexture): void <cimport, nodecl> end
global function sfTexture_getSize(texture: *sfTexture <const>): sfVector2u <cimport, nodecl> end
global function sfTexture_copyToImage(texture: *sfTexture <const>): *sfImage <cimport, nodecl> end
global function sfTexture_updateFromPixels(texture: *sfTexture, pixels: *[0]sfUint8 <const>, width: cuint, height: cuint, x: cuint, y: cuint): void <cimport, nodecl> end
global function sfTexture_updateFromImage(destination: *sfTexture, source: *sfTexture, x: cuint, y: cuint): void <cimport, nodecl> end
global function sfTexture_updateFromWindow(texture: *sfTexture, window: *sfWindow <const>, x: cuint, y: cuint): void <cimport, nodecl> end
global function sfTexture_updateFromRenderWindow(texture: *sfTexture, renderWindow: *sfRenderWindow <const>, x: cuint, y: cuint): void <cimport, nodecl> end
global function sfTexture_setSmooth(texture: *sfTexture, smooth: sfBool): void <cimport, nodecl> end
global function sfTexture_isSmooth(texture: *sfTexture <const>): sfBool <cimport, nodecl> end
global function sfTexture_setSrgb(texture: *sfTexture, sRgb: sfBool): void <cimport, nodecl> end
global function sfTexture_isSrgb(texture: *sfTexture <const>): sfBool <cimport, nodecl> end
global function sfTexture_setRepeated(texture: *sfTexture, repeated: sfBool): void <cimport, nodecl> end
global function sfTexture_isRepeated(texture: *sfTexture <const>): sfBool <cimport, nodecl> end
global function sfTexture_generateMipmap(texture: *sfTexture): sfBool <cimport, nodecl> end
global function sfTexture_swap(left: *sfTexture, right: *sfTexture): void <cimport, nodecl> end
global function sfTexture_getNativeHandle(texture: *sfTexture <const>): cuint <cimport, nodecl> end
global function sfTexture_getMaximumSize(): cuint <cimport, nodecl> end

global sfVertexBufferUsage: type <cimport, nodecl, using> = @enum(cint) {
  sfVertexBufferStream = 0,
  sfVertexBufferDynamic,
  sfVertexBufferStatic
}

global function sfVertexBuffer_create(vertexCount: cuint, type: sfPrimitiveType, usage: sfVertexBufferUsage): *sfVertexBuffer <cimport, nodecl> end
global function sfVertexBuffer_copy(vertexBuffer: *sfVertexBuffer <const>): *sfVertexBuffer <cimport, nodecl> end
global function sfVertexBuffer_destroy(vertexBuffer: *sfVertexBuffer): void <cimport, nodecl> end
global function sfVertexBuffer_getVertexCount(vertexBuffer: *sfVertexBuffer <const>): cuint <cimport, nodecl> end
global function sfVertexBuffer_update(vertexBuffer: *sfVertexBuffer , vertices: *[0]sfVertex <const>, vertexCount: cuint, offset: cuint): sfBool <cimport, nodecl> end
global function sfVertexBuffer_updateFromVertexBuffer(vertexBuffer: *sfVertexBuffer, other: *sfVertexBuffer <const>): sfBool <cimport, nodecl> end
global function sfVertexBuffer_swap(left: *sfVertexBuffer, right: *sfVertexBuffer): void <cimport, nodecl> end
global function sfVertexBuffer_getNativeHandle(vertexBuffer: *sfVertexBuffer): cuint <cimport, nodecl> end
global function sfVertexBuffer_setPrimitiveType(vertexBuffer: *sfVertexBuffer, type: sfPrimitiveType): void <cimport, nodecl> end
global function sfVertexBuffer_getPrimitiveType(vertexBuffer: *sfVertexBuffer <const>): sfPrimitiveType <cimport, nodecl> end
global function sfVertexBuffer_setUsage(vertexBuffer: *sfVertexBuffer, usage: sfVertexBufferUsage): void <cimport, nodecl> end
global function sfVertexBuffer_getUsage(vertexBuffer: *sfVertexBuffer <const>): sfVertexBufferUsage <cimport, nodecl> end
global function sfVertexBuffer_bind(vertexBuffer: *sfVertexBuffer <const>): void <cimport, nodecl> end
global function sfVertexBuffer_isAvailable(): sfBool <cimport, nodecl> end
