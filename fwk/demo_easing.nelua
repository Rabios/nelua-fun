require "C.arg"
require "fwk"

local ease: type = @record {
  ease_func: function(float32): float32,
  name: cstring
}

local easings: array(ease, 32) = {
  (@ease) { ease_linear, "ease_linear" },
  (@ease) { ease_out_sine, "ease_out_sine" },
  (@ease) { ease_out_quad, "ease_out_quad" },
  (@ease) { ease_out_cubic, "ease_out_cubic" },
  (@ease) { ease_out_quart, "ease_out_quart" },
  (@ease) { ease_out_quint, "ease_out_quint" },
  (@ease) { ease_out_expo, "ease_out_expo" },
  (@ease) { ease_out_circ, "ease_out_circ" },
  (@ease) { ease_out_back, "ease_out_back" },
  (@ease) { ease_out_elastic, "ease_out_elastic" },
  (@ease) { ease_out_bounce, "ease_out_bounce" },
  (@ease) { ease_in_sine, "ease_in_sine" },
  (@ease) { ease_in_quad, "ease_in_quad" },
  (@ease) { ease_in_cubic, "ease_in_cubic" },
  (@ease) { ease_in_quart, "ease_in_quart" },
  (@ease) { ease_in_quint, "ease_in_quint" },
  (@ease) { ease_in_expo, "ease_in_expo" },
  (@ease) { ease_in_circ, "ease_in_circ" },
  (@ease) { ease_in_back, "ease_in_back" },
  (@ease) { ease_in_elastic, "ease_in_elastic" },
  (@ease) { ease_in_bounce, "ease_in_bounce" },
  (@ease) { ease_inout_sine, "ease_inout_sine" },
  (@ease) { ease_inout_quad, "ease_inout_quad" },
  (@ease) { ease_inout_cubic, "ease_inout_cubic" },
  (@ease) { ease_inout_quart, "ease_inout_quart" },
  (@ease) { ease_inout_quint, "ease_inout_quint" },
  (@ease) { ease_inout_expo, "ease_inout_expo" },
  (@ease) { ease_inout_circ, "ease_inout_circ" },
  (@ease) { ease_inout_back, "ease_inout_back" },
  (@ease) { ease_inout_elastic, "ease_inout_elastic" },
  (@ease) { ease_inout_bounce, "ease_inout_bounce" },
  (@ease) { ease_inout_perlin, "ease_inout_perlin" }
}

local function main(argc: cint, argv: *[0]cstring): cint
  window_create(75, 0)
  
  while window_swap() == 1 do
    local timer: float32 = 0
    timer = timer + (1 / 60)
    
    if timer > 2 then
      timer = 0
    end
    
    if ui_begin("ease", 0) == 1 then
      local linear_delta: float32 = timer / 2
      
      for i = 0, #easings - 1 do
        local nonlinear_delta: float32 = easings[i].ease_func(linear_delta)
        ui_slider(easings[i].name, &nonlinear_delta)
      end
      
      ui_end()
    end
  end
  
  return 0
end

return main(C.argc, C.argv)
